/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __WPA_GROUP_H__
#define __WPA_GROUP_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE                                         \
  (wpa_group_org_freedesktop_dbus_introspectable_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                           \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,             \
                              WpaGroupOrgFreedesktopDBusIntrospectable))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                        \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o)                                 \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,          \
                                 WpaGroupOrgFreedesktopDBusIntrospectableIface))

struct _WpaGroupOrgFreedesktopDBusIntrospectable;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectable WpaGroupOrgFreedesktopDBusIntrospectable;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableIface
  WpaGroupOrgFreedesktopDBusIntrospectableIface;

struct _WpaGroupOrgFreedesktopDBusIntrospectableIface {
  GTypeInterface parent_iface;

  gboolean (*handle_introspect)(WpaGroupOrgFreedesktopDBusIntrospectable *object,
                                GDBusMethodInvocation *invocation);
};

GType
wpa_group_org_freedesktop_dbus_introspectable_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_group_org_freedesktop_dbus_introspectable_interface_info(void);
guint
wpa_group_org_freedesktop_dbus_introspectable_override_properties(GObjectClass *klass,
                                                                  guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_group_org_freedesktop_dbus_introspectable_complete_introspect(
  WpaGroupOrgFreedesktopDBusIntrospectable *object, GDBusMethodInvocation *invocation,
  const gchar *data);

/* D-Bus method calls: */
void
wpa_group_org_freedesktop_dbus_introspectable_call_introspect(
  WpaGroupOrgFreedesktopDBusIntrospectable *proxy, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_group_org_freedesktop_dbus_introspectable_call_introspect_finish(
  WpaGroupOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GAsyncResult *res,
  GError **error);

gboolean
wpa_group_org_freedesktop_dbus_introspectable_call_introspect_sync(
  WpaGroupOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GCancellable *cancellable,
  GError **error);

/* ---- */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY                                   \
  (wpa_group_org_freedesktop_dbus_introspectable_proxy_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,       \
                              WpaGroupOrgFreedesktopDBusIntrospectableProxy))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                               \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,          \
                           WpaGroupOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o)                           \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,        \
                             WpaGroupOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                  \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                            \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableProxy
  WpaGroupOrgFreedesktopDBusIntrospectableProxy;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableProxyClass
  WpaGroupOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableProxyPrivate
  WpaGroupOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _WpaGroupOrgFreedesktopDBusIntrospectableProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaGroupOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _WpaGroupOrgFreedesktopDBusIntrospectableProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_group_org_freedesktop_dbus_introspectable_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void
wpa_group_org_freedesktop_dbus_introspectable_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaGroupOrgFreedesktopDBusIntrospectable *
wpa_group_org_freedesktop_dbus_introspectable_proxy_new_finish(GAsyncResult *res, GError **error);
WpaGroupOrgFreedesktopDBusIntrospectable *
wpa_group_org_freedesktop_dbus_introspectable_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_group_org_freedesktop_dbus_introspectable_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaGroupOrgFreedesktopDBusIntrospectable *
wpa_group_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                       GError **error);
WpaGroupOrgFreedesktopDBusIntrospectable *
wpa_group_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON                                \
  (wpa_group_org_freedesktop_dbus_introspectable_skeleton_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                                  \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,    \
                              WpaGroupOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                            \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,       \
                           WpaGroupOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o)                        \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,     \
                             WpaGroupOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                         \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableSkeleton
  WpaGroupOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableSkeletonClass
  WpaGroupOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _WpaGroupOrgFreedesktopDBusIntrospectableSkeletonPrivate
  WpaGroupOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _WpaGroupOrgFreedesktopDBusIntrospectableSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaGroupOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _WpaGroupOrgFreedesktopDBusIntrospectableSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_group_org_freedesktop_dbus_introspectable_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

WpaGroupOrgFreedesktopDBusIntrospectable *
wpa_group_org_freedesktop_dbus_introspectable_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES                                             \
  (wpa_group_org_freedesktop_dbus_properties_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,                 \
                              WpaGroupOrgFreedesktopDBusProperties))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                            \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o)                                     \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,              \
                                 WpaGroupOrgFreedesktopDBusPropertiesIface))

struct _WpaGroupOrgFreedesktopDBusProperties;
typedef struct _WpaGroupOrgFreedesktopDBusProperties WpaGroupOrgFreedesktopDBusProperties;
typedef struct _WpaGroupOrgFreedesktopDBusPropertiesIface WpaGroupOrgFreedesktopDBusPropertiesIface;

struct _WpaGroupOrgFreedesktopDBusPropertiesIface {
  GTypeInterface parent_iface;

  gboolean (*handle_get)(WpaGroupOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname);

  gboolean (*handle_get_all)(WpaGroupOrgFreedesktopDBusProperties *object,
                             GDBusMethodInvocation *invocation, const gchar *arg_interface);

  gboolean (*handle_set)(WpaGroupOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname, GVariant *arg_value);
};

GType
wpa_group_org_freedesktop_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_group_org_freedesktop_dbus_properties_interface_info(void);
guint
wpa_group_org_freedesktop_dbus_properties_override_properties(GObjectClass *klass,
                                                              guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_group_org_freedesktop_dbus_properties_complete_get(WpaGroupOrgFreedesktopDBusProperties *object,
                                                       GDBusMethodInvocation *invocation,
                                                       GVariant *value);

void
wpa_group_org_freedesktop_dbus_properties_complete_get_all(
  WpaGroupOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation, GVariant *props);

void
wpa_group_org_freedesktop_dbus_properties_complete_set(WpaGroupOrgFreedesktopDBusProperties *object,
                                                       GDBusMethodInvocation *invocation);

/* D-Bus method calls: */
void
wpa_group_org_freedesktop_dbus_properties_call_get(WpaGroupOrgFreedesktopDBusProperties *proxy,
                                                   const gchar *arg_interface,
                                                   const gchar *arg_propname,
                                                   GCancellable *cancellable,
                                                   GAsyncReadyCallback callback,
                                                   gpointer user_data);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_get_finish(
  WpaGroupOrgFreedesktopDBusProperties *proxy, GVariant **out_value, GAsyncResult *res,
  GError **error);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_get_sync(WpaGroupOrgFreedesktopDBusProperties *proxy,
                                                        const gchar *arg_interface,
                                                        const gchar *arg_propname,
                                                        GVariant **out_value,
                                                        GCancellable *cancellable, GError **error);

void
wpa_group_org_freedesktop_dbus_properties_call_get_all(WpaGroupOrgFreedesktopDBusProperties *proxy,
                                                       const gchar *arg_interface,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_get_all_finish(
  WpaGroupOrgFreedesktopDBusProperties *proxy, GVariant **out_props, GAsyncResult *res,
  GError **error);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_get_all_sync(
  WpaGroupOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface, GVariant **out_props,
  GCancellable *cancellable, GError **error);

void
wpa_group_org_freedesktop_dbus_properties_call_set(WpaGroupOrgFreedesktopDBusProperties *proxy,
                                                   const gchar *arg_interface,
                                                   const gchar *arg_propname, GVariant *arg_value,
                                                   GCancellable *cancellable,
                                                   GAsyncReadyCallback callback,
                                                   gpointer user_data);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_set_finish(
  WpaGroupOrgFreedesktopDBusProperties *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_group_org_freedesktop_dbus_properties_call_set_sync(WpaGroupOrgFreedesktopDBusProperties *proxy,
                                                        const gchar *arg_interface,
                                                        const gchar *arg_propname,
                                                        GVariant *arg_value,
                                                        GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY                                       \
  (wpa_group_org_freedesktop_dbus_properties_proxy_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                         \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,           \
                              WpaGroupOrgFreedesktopDBusPropertiesProxy))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                   \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,              \
                           WpaGroupOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                               \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,            \
                             WpaGroupOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                      \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _WpaGroupOrgFreedesktopDBusPropertiesProxy WpaGroupOrgFreedesktopDBusPropertiesProxy;
typedef struct _WpaGroupOrgFreedesktopDBusPropertiesProxyClass
  WpaGroupOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _WpaGroupOrgFreedesktopDBusPropertiesProxyPrivate
  WpaGroupOrgFreedesktopDBusPropertiesProxyPrivate;

struct _WpaGroupOrgFreedesktopDBusPropertiesProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaGroupOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _WpaGroupOrgFreedesktopDBusPropertiesProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_group_org_freedesktop_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void
wpa_group_org_freedesktop_dbus_properties_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaGroupOrgFreedesktopDBusProperties *
wpa_group_org_freedesktop_dbus_properties_proxy_new_finish(GAsyncResult *res, GError **error);
WpaGroupOrgFreedesktopDBusProperties *
wpa_group_org_freedesktop_dbus_properties_proxy_new_sync(GDBusConnection *connection,
                                                         GDBusProxyFlags flags, const gchar *name,
                                                         const gchar *object_path,
                                                         GCancellable *cancellable, GError **error);

void
wpa_group_org_freedesktop_dbus_properties_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaGroupOrgFreedesktopDBusProperties *
wpa_group_org_freedesktop_dbus_properties_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                   GError **error);
WpaGroupOrgFreedesktopDBusProperties *
wpa_group_org_freedesktop_dbus_properties_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON                                    \
  (wpa_group_org_freedesktop_dbus_properties_skeleton_get_type())
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,        \
                              WpaGroupOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                                \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,           \
                           WpaGroupOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_GROUP_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                            \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,         \
                             WpaGroupOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_GROUP_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                             \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _WpaGroupOrgFreedesktopDBusPropertiesSkeleton
  WpaGroupOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _WpaGroupOrgFreedesktopDBusPropertiesSkeletonClass
  WpaGroupOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _WpaGroupOrgFreedesktopDBusPropertiesSkeletonPrivate
  WpaGroupOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _WpaGroupOrgFreedesktopDBusPropertiesSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaGroupOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _WpaGroupOrgFreedesktopDBusPropertiesSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_group_org_freedesktop_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

WpaGroupOrgFreedesktopDBusProperties *
wpa_group_org_freedesktop_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Group */

#define WPA_GROUP_TYPE_         (wpa_group__get_type())
#define WPA_GROUP_(o)           (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE_, WpaGroup))
#define WPA_GROUP_IS_(o)        (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE_))
#define WPA_GROUP__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_GROUP_TYPE_, WpaGroupIface))

struct _WpaGroup;
typedef struct _WpaGroup WpaGroup;
typedef struct _WpaGroupIface WpaGroupIface;

struct _WpaGroupIface {
  GTypeInterface parent_iface;

  const gchar *(*get_bssid)(WpaGroup *object);

  guint16 (*get_frequency)(WpaGroup *object);

  const gchar *(*get_group)(WpaGroup *object);

  const gchar *const *(*get_members)(WpaGroup *object);

  const gchar *(*get_passphrase)(WpaGroup *object);

  GVariant *(*get_psk)(WpaGroup *object);

  const gchar *(*get_role)(WpaGroup *object);

  GVariant *(*get_ssid)(WpaGroup *object);

  GVariant *(*get_wpsvendor_extensions)(WpaGroup *object);

  void (*peer_disconnected)(WpaGroup *object, const gchar *arg_peer);

  void (*peer_joined)(WpaGroup *object, const gchar *arg_peer);
};

GType
wpa_group__get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_group__interface_info(void);
guint
wpa_group__override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus signal emissions functions: */
void
wpa_group__emit_peer_joined(WpaGroup *object, const gchar *arg_peer);

void
wpa_group__emit_peer_disconnected(WpaGroup *object, const gchar *arg_peer);

/* D-Bus property accessors: */
const gchar *const *
wpa_group__get_members(WpaGroup *object);
gchar **
wpa_group__dup_members(WpaGroup *object);
void
wpa_group__set_members(WpaGroup *object, const gchar *const *value);

const gchar *
wpa_group__get_group(WpaGroup *object);
gchar *
wpa_group__dup_group(WpaGroup *object);
void
wpa_group__set_group(WpaGroup *object, const gchar *value);

const gchar *
wpa_group__get_role(WpaGroup *object);
gchar *
wpa_group__dup_role(WpaGroup *object);
void
wpa_group__set_role(WpaGroup *object, const gchar *value);

GVariant *
wpa_group__get_ssid(WpaGroup *object);
GVariant *
wpa_group__dup_ssid(WpaGroup *object);
void
wpa_group__set_ssid(WpaGroup *object, GVariant *value);

const gchar *
wpa_group__get_bssid(WpaGroup *object);
gchar *
wpa_group__dup_bssid(WpaGroup *object);
void
wpa_group__set_bssid(WpaGroup *object, const gchar *value);

guint16
wpa_group__get_frequency(WpaGroup *object);
void
wpa_group__set_frequency(WpaGroup *object, guint16 value);

const gchar *
wpa_group__get_passphrase(WpaGroup *object);
gchar *
wpa_group__dup_passphrase(WpaGroup *object);
void
wpa_group__set_passphrase(WpaGroup *object, const gchar *value);

GVariant *
wpa_group__get_psk(WpaGroup *object);
GVariant *
wpa_group__dup_psk(WpaGroup *object);
void
wpa_group__set_psk(WpaGroup *object, GVariant *value);

GVariant *
wpa_group__get_wpsvendor_extensions(WpaGroup *object);
GVariant *
wpa_group__dup_wpsvendor_extensions(WpaGroup *object);
void
wpa_group__set_wpsvendor_extensions(WpaGroup *object, GVariant *value);

/* ---- */

#define WPA_GROUP_TYPE__PROXY (wpa_group__proxy_get_type())
#define WPA_GROUP__PROXY(o)   (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE__PROXY, WpaGroupProxy))
#define WPA_GROUP__PROXY_CLASS(k)                                                                  \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE__PROXY, WpaGroupProxyClass))
#define WPA_GROUP__PROXY_GET_CLASS(o)                                                              \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE__PROXY, WpaGroupProxyClass))
#define WPA_GROUP_IS__PROXY(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE__PROXY))
#define WPA_GROUP_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE__PROXY))

typedef struct _WpaGroupProxy WpaGroupProxy;
typedef struct _WpaGroupProxyClass WpaGroupProxyClass;
typedef struct _WpaGroupProxyPrivate WpaGroupProxyPrivate;

struct _WpaGroupProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaGroupProxyPrivate *priv;
};

struct _WpaGroupProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_group__proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupProxy, g_object_unref)
#endif

void
wpa_group__proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                     const gchar *object_path, GCancellable *cancellable,
                     GAsyncReadyCallback callback, gpointer user_data);
WpaGroup *
wpa_group__proxy_new_finish(GAsyncResult *res, GError **error);
WpaGroup *
wpa_group__proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                          const gchar *object_path, GCancellable *cancellable, GError **error);

void
wpa_group__proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                             const gchar *object_path, GCancellable *cancellable,
                             GAsyncReadyCallback callback, gpointer user_data);
WpaGroup *
wpa_group__proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaGroup *
wpa_group__proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                  const gchar *object_path, GCancellable *cancellable,
                                  GError **error);

/* ---- */

#define WPA_GROUP_TYPE__SKELETON (wpa_group__skeleton_get_type())
#define WPA_GROUP__SKELETON(o)                                                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_GROUP_TYPE__SKELETON, WpaGroupSkeleton))
#define WPA_GROUP__SKELETON_CLASS(k)                                                               \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_GROUP_TYPE__SKELETON, WpaGroupSkeletonClass))
#define WPA_GROUP__SKELETON_GET_CLASS(o)                                                           \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_GROUP_TYPE__SKELETON, WpaGroupSkeletonClass))
#define WPA_GROUP_IS__SKELETON(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_GROUP_TYPE__SKELETON))
#define WPA_GROUP_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_GROUP_TYPE__SKELETON))

typedef struct _WpaGroupSkeleton WpaGroupSkeleton;
typedef struct _WpaGroupSkeletonClass WpaGroupSkeletonClass;
typedef struct _WpaGroupSkeletonPrivate WpaGroupSkeletonPrivate;

struct _WpaGroupSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaGroupSkeletonPrivate *priv;
};

struct _WpaGroupSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_group__skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaGroupSkeleton, g_object_unref)
#endif

WpaGroup *
wpa_group__skeleton_new(void);

G_END_DECLS

#endif /* __WPA_GROUP_H__ */
