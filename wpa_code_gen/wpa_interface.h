/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WPA_INTERFACE_H__
#define __WPA_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (wpa_interface_org_freedesktop_dbus_introspectable_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, wpainterfaceOrgFreedesktopDBusIntrospectable))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, wpainterfaceOrgFreedesktopDBusIntrospectableIface))

struct _wpainterfaceOrgFreedesktopDBusIntrospectable;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectable wpainterfaceOrgFreedesktopDBusIntrospectable;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableIface wpainterfaceOrgFreedesktopDBusIntrospectableIface;

struct _wpainterfaceOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    wpainterfaceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType wpa_interface_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_interface_org_freedesktop_dbus_introspectable_interface_info (void);
guint wpa_interface_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_interface_org_freedesktop_dbus_introspectable_complete_introspect (
    wpainterfaceOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);



/* D-Bus method calls: */
void wpa_interface_org_freedesktop_dbus_introspectable_call_introspect (
    wpainterfaceOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_org_freedesktop_dbus_introspectable_call_introspect_finish (
    wpainterfaceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_org_freedesktop_dbus_introspectable_call_introspect_sync (
    wpainterfaceOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (wpa_interface_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpainterfaceOrgFreedesktopDBusIntrospectableProxy))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpainterfaceOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpainterfaceOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableProxy wpainterfaceOrgFreedesktopDBusIntrospectableProxy;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableProxyClass wpainterfaceOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableProxyPrivate wpainterfaceOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _wpainterfaceOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpainterfaceOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _wpainterfaceOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_interface_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void wpa_interface_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceOrgFreedesktopDBusIntrospectable *wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceOrgFreedesktopDBusIntrospectable *wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceOrgFreedesktopDBusIntrospectable *wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceOrgFreedesktopDBusIntrospectable *wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (wpa_interface_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpainterfaceOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableSkeleton wpainterfaceOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonClass wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _wpainterfaceOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _wpainterfaceOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_interface_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

wpainterfaceOrgFreedesktopDBusIntrospectable *wpa_interface_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (wpa_interface_org_freedesktop_dbus_properties_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, wpainterfaceOrgFreedesktopDBusProperties))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, wpainterfaceOrgFreedesktopDBusPropertiesIface))

struct _wpainterfaceOrgFreedesktopDBusProperties;
typedef struct _wpainterfaceOrgFreedesktopDBusProperties wpainterfaceOrgFreedesktopDBusProperties;
typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesIface wpainterfaceOrgFreedesktopDBusPropertiesIface;

struct _wpainterfaceOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_propname);

  gboolean (*handle_get_all) (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value);

};

GType wpa_interface_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_interface_org_freedesktop_dbus_properties_interface_info (void);
guint wpa_interface_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_interface_org_freedesktop_dbus_properties_complete_get (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void wpa_interface_org_freedesktop_dbus_properties_complete_get_all (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *props);

void wpa_interface_org_freedesktop_dbus_properties_complete_set (
    wpainterfaceOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void wpa_interface_org_freedesktop_dbus_properties_call_get (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_get_finish (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_get_sync (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_org_freedesktop_dbus_properties_call_get_all (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_get_all_finish (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    GVariant **out_props,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_get_all_sync (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_props,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_org_freedesktop_dbus_properties_call_set (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_set_finish (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_org_freedesktop_dbus_properties_call_set_sync (
    wpainterfaceOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (wpa_interface_org_freedesktop_dbus_properties_proxy_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpainterfaceOrgFreedesktopDBusPropertiesProxy))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpainterfaceOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpainterfaceOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesProxy wpainterfaceOrgFreedesktopDBusPropertiesProxy;
typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesProxyClass wpainterfaceOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesProxyPrivate wpainterfaceOrgFreedesktopDBusPropertiesProxyPrivate;

struct _wpainterfaceOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpainterfaceOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _wpainterfaceOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_interface_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void wpa_interface_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceOrgFreedesktopDBusProperties *wpa_interface_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceOrgFreedesktopDBusProperties *wpa_interface_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceOrgFreedesktopDBusProperties *wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceOrgFreedesktopDBusProperties *wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (wpa_interface_org_freedesktop_dbus_properties_skeleton_get_type ())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpainterfaceOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpainterfaceOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpainterfaceOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesSkeleton wpainterfaceOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesSkeletonClass wpainterfaceOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _wpainterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate wpainterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _wpainterfaceOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpainterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _wpainterfaceOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_interface_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

wpainterfaceOrgFreedesktopDBusProperties *wpa_interface_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface */

#define WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE (wpa_interface_fi_w1_wpa_supplicant1_interface_get_type ())
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE, wpainterfaceFiW1Wpa_supplicant1Interface))
#define WPA_INTERFACE_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE))
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE, wpainterfaceFiW1Wpa_supplicant1InterfaceIface))

struct _wpainterfaceFiW1Wpa_supplicant1Interface;
typedef struct _wpainterfaceFiW1Wpa_supplicant1Interface wpainterfaceFiW1Wpa_supplicant1Interface;
typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceIface wpainterfaceFiW1Wpa_supplicant1InterfaceIface;

struct _wpainterfaceFiW1Wpa_supplicant1InterfaceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_abort_scan) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_add_blob) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_data);

  gboolean (*handle_add_network) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_disconnect) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_eaplogoff) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_eaplogon) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_flush_bss) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    guint arg_age);

  gboolean (*handle_get_blob) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_network_reply) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value);

  gboolean (*handle_reassociate) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reattach) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_reconnect) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_all_networks) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_blob) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_remove_network) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_save_config) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_scan) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_select_network) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_set_pkcs11_engine_and_module_path) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_pkcs11_engine_path,
    const gchar *arg_pkcs11_module_path);

  gboolean (*handle_signal_poll) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_subscribe_probe_req) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_unsubscribe_probe_req) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_vendor_elem_add) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    gint arg_frame_id,
    const gchar *arg_ielems);

  gboolean (*handle_vendor_elem_get) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    gint arg_frame_id);

  gboolean (*handle_vendor_elem_rem) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    gint arg_frame_id,
    const gchar *arg_ielems);

  const gchar * (*get_access_network_type) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  guint  (*get_ap_scan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ap_vendor_elements) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  gint  (*get_assoc_status_code) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_auto_interworking) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_auto_uuid) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_autoscan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_beacon_int) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_bgscan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  GVariant * (*get_blobs) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_bridge_ifname) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_bss_max_count) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  guint  (*get_bssexpire_age) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  guint  (*get_bssexpire_count) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar *const * (*get_bsss) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  GVariant * (*get_capabilities) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_cert_in_cb) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_config_file) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_config_methods) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_country) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ctrl_interface) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ctrl_interface_group) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_current_auth_mode) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_current_bss) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_current_network) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_device_name) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_device_type) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_disable_scan_offload) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_disassoc_low_ack) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  gint  (*get_disconnect_reason) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_dot11_rsnaconfig_pmklifetime) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_dot11_rsnaconfig_pmkreauth_threshold) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_dot11_rsnaconfig_satimeout) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_dpp_config_processing) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_driver) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_driver_param) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_dtim_period) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_eapol_version) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ext_password_backend) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_external_sim) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  gboolean  (*get_fast_reauth) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_filter_rssi) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_filter_ssids) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_freq_list) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ftm_initiator) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ftm_responder) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_gas_address3) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_gas_rand_addr_lifetime) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_gas_rand_mac_addr) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_go_access_network_type) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_go_internet) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_go_interworking) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_go_venue_group) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_go_venue_type) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_hessid) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ifname) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ignore_old_scan_res) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_interworking) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ip_addr_end) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ip_addr_go) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ip_addr_mask) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_ip_addr_start) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_key_mgmt_offload) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_mac_addr) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_manufacturer) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_max_num_sta) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_model_name) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_model_number) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar *const * (*get_networks) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_okc) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_opensc_engine_path) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_openssl_ciphers) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_os_version) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_osu_dir) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_add_cli_chan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_cli_probe) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_disabled) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_ctwindow) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_freq_change_policy) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_ht40) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_intent) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_max_inactivity) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_go_vht) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_group_idle) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_ignore_shared_freq) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_intra_bss) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_listen_channel) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_listen_reg_class) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_no_go_freq) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_no_group_iface) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_oper_channel) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_oper_reg_class) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_optimize_listen_chan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_passphrase_len) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_pref_chan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_search_delay) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_p2p_ssid_postfix) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_passive_scan) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pbc_in_m1) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pcsc_pin) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pcsc_reader) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_persistent_reconnect) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pkcs11_engine_path) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pkcs11_module_path) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_pmf) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_preassoc_mac_addr) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_rand_addr_lifetime) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_reassoc_same_bss_optim) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_sae_groups) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_scan_cur_freq) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  gint  (*get_scan_interval) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  gboolean  (*get_scanning) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_sched_scan_interval) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_sched_scan_plans) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_sched_scan_start_delay) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_sec_device_type) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_serial_number) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_state) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_tdls_external_control) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_update_config) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_uuid) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wowlan_triggers) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wpa_rsc_relaxation) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_cred_processing) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_nfc_dev_pw) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_nfc_dev_pw_id) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_nfc_dh_privkey) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_nfc_dh_pubkey) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_priority) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  const gchar * (*get_wps_vendor_ext_m1) (wpainterfaceFiW1Wpa_supplicant1Interface *object);

  void (*blob_added) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

  void (*blob_removed) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

  void (*bssadded) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*bssremoved) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

  void (*certification) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_certification);

  void (*eap) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_status,
    const gchar *arg_parameter);

  void (*network_added) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*network_removed) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

  void (*network_request) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_text);

  void (*network_selected) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

  void (*probe_request) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_args);

  void (*properties_changed) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_properties);

  void (*scan_done) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    gboolean arg_success);

  void (*sta_authorized) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

  void (*sta_deauthorized) (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

};

GType wpa_interface_fi_w1_wpa_supplicant1_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_interface_fi_w1_wpa_supplicant1_interface_interface_info (void);
guint wpa_interface_fi_w1_wpa_supplicant1_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_scan (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_signal_poll (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    GVariant *args);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_disconnect (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_add_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_reassociate (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_reattach (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_reconnect (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_remove_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_remove_all_networks (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_select_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_network_reply (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_add_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_get_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_remove_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_set_pkcs11_engine_and_module_path (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_flush_bss (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_subscribe_probe_req (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_unsubscribe_probe_req (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_eaplogoff (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_eaplogon (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_add (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_get (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation,
    const gchar *ielems);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_vendor_elem_rem (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_save_config (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_fi_w1_wpa_supplicant1_interface_complete_abort_scan (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_scan_done (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    gboolean arg_success);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_bssadded (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_bssremoved (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_blob_added (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_blob_removed (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_network_added (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_network_removed (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_network_selected (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_properties_changed (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_properties);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_probe_request (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_args);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_certification (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    GVariant *arg_certification);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_eap (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_status,
    const gchar *arg_parameter);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_sta_authorized (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_sta_deauthorized (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_name);

void wpa_interface_fi_w1_wpa_supplicant1_interface_emit_network_request (
    wpainterfaceFiW1Wpa_supplicant1Interface *object,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_text);



/* D-Bus method calls: */
void wpa_interface_fi_w1_wpa_supplicant1_interface_call_scan (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_scan_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_scan_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_signal_poll (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_signal_poll_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant **out_args,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_signal_poll_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant **out_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_disconnect (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_disconnect_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_disconnect_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_network_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_network_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GVariant *arg_args,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_reassociate (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reassociate_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reassociate_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_reattach (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reattach_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reattach_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_reconnect (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reconnect_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_reconnect_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_network_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_network_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_all_networks (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_all_networks_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_all_networks_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_select_network (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_select_network_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_select_network_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_network_reply (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_network_reply_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_network_reply_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_path,
    const gchar *arg_field,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    const gchar *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_blob_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_add_blob_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    const gchar *arg_data,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_get_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_get_blob_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_get_blob_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_blob (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_blob_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_remove_blob_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_pkcs11_engine_path,
    const gchar *arg_pkcs11_module_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_set_pkcs11_engine_and_module_path_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    const gchar *arg_pkcs11_engine_path,
    const gchar *arg_pkcs11_module_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_flush_bss (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    guint arg_age,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_flush_bss_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_flush_bss_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    guint arg_age,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_subscribe_probe_req_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_unsubscribe_probe_req_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogoff (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogoff_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogoff_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogon (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogon_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_eaplogon_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    const gchar *arg_ielems,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_add_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    const gchar *arg_ielems,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gchar **out_ielems,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_get_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    gchar **out_ielems,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    const gchar *arg_ielems,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_vendor_elem_rem_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    gint arg_frame_id,
    const gchar *arg_ielems,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_save_config (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_save_config_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_save_config_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_call_abort_scan (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_abort_scan_finish (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_call_abort_scan_sync (
    wpainterfaceFiW1Wpa_supplicant1Interface *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
GVariant *wpa_interface_fi_w1_wpa_supplicant1_interface_get_capabilities (wpainterfaceFiW1Wpa_supplicant1Interface *object);
GVariant *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_capabilities (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_capabilities (wpainterfaceFiW1Wpa_supplicant1Interface *object, GVariant *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_state (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_state (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_state (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_get_scanning (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_scanning (wpainterfaceFiW1Wpa_supplicant1Interface *object, gboolean value);

guint wpa_interface_fi_w1_wpa_supplicant1_interface_get_ap_scan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ap_scan (wpainterfaceFiW1Wpa_supplicant1Interface *object, guint value);

guint wpa_interface_fi_w1_wpa_supplicant1_interface_get_bssexpire_age (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bssexpire_age (wpainterfaceFiW1Wpa_supplicant1Interface *object, guint value);

guint wpa_interface_fi_w1_wpa_supplicant1_interface_get_bssexpire_count (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bssexpire_count (wpainterfaceFiW1Wpa_supplicant1Interface *object, guint value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_country (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_country (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_country (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_driver (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_driver (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_driver (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_bridge_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_bridge_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bridge_ifname (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_config_file (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_config_file (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_config_file (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_current_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_current_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_current_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_current_network (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_current_network (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_current_network (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_current_auth_mode (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_current_auth_mode (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_current_auth_mode (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

GVariant *wpa_interface_fi_w1_wpa_supplicant1_interface_get_blobs (wpainterfaceFiW1Wpa_supplicant1Interface *object);
GVariant *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_blobs (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_blobs (wpainterfaceFiW1Wpa_supplicant1Interface *object, GVariant *value);

const gchar *const *wpa_interface_fi_w1_wpa_supplicant1_interface_get_bsss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar **wpa_interface_fi_w1_wpa_supplicant1_interface_dup_bsss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bsss (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *const *value);

const gchar *const *wpa_interface_fi_w1_wpa_supplicant1_interface_get_networks (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar **wpa_interface_fi_w1_wpa_supplicant1_interface_dup_networks (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_networks (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *const *value);

gboolean wpa_interface_fi_w1_wpa_supplicant1_interface_get_fast_reauth (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_fast_reauth (wpainterfaceFiW1Wpa_supplicant1Interface *object, gboolean value);

gint wpa_interface_fi_w1_wpa_supplicant1_interface_get_scan_interval (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_scan_interval (wpainterfaceFiW1Wpa_supplicant1Interface *object, gint value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pkcs11_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pkcs11_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pkcs11_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pkcs11_module_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pkcs11_module_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pkcs11_module_path (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

gint wpa_interface_fi_w1_wpa_supplicant1_interface_get_disconnect_reason (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_disconnect_reason (wpainterfaceFiW1Wpa_supplicant1Interface *object, gint value);

gint wpa_interface_fi_w1_wpa_supplicant1_interface_get_assoc_status_code (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_assoc_status_code (wpainterfaceFiW1Wpa_supplicant1Interface *object, gint value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ctrl_interface (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ctrl_interface (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ctrl_interface (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ctrl_interface_group (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ctrl_interface_group (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ctrl_interface_group (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_eapol_version (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_eapol_version (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_eapol_version (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_bgscan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_bgscan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bgscan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_disable_scan_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_disable_scan_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_disable_scan_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_opensc_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_opensc_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_opensc_engine_path (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_openssl_ciphers (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_openssl_ciphers (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_openssl_ciphers (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pcsc_reader (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pcsc_reader (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pcsc_reader (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pcsc_pin (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pcsc_pin (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pcsc_pin (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_external_sim (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_external_sim (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_external_sim (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_driver_param (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_driver_param (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_driver_param (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_pmklifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_pmklifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_pmklifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_pmkreauth_threshold (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_pmkreauth_threshold (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_pmkreauth_threshold (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_dot11_rsnaconfig_satimeout (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_dot11_rsnaconfig_satimeout (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_dot11_rsnaconfig_satimeout (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_update_config (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_update_config (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_update_config (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_auto_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_auto_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_auto_uuid (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_device_name (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_device_name (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_device_name (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_manufacturer (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_manufacturer (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_manufacturer (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_model_name (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_model_name (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_model_name (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_model_number (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_model_number (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_model_number (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_serial_number (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_serial_number (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_serial_number (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_os_version (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_os_version (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_os_version (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_config_methods (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_config_methods (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_config_methods (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_cred_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_cred_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_cred_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_vendor_ext_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_vendor_ext_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_vendor_ext_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_sec_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_sec_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_sec_device_type (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_listen_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_listen_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_listen_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_listen_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_listen_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_listen_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_oper_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_oper_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_oper_reg_class (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_oper_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_oper_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_oper_channel (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_intent (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_intent (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_intent (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_ssid_postfix (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_ssid_postfix (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_ssid_postfix (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_persistent_reconnect (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_persistent_reconnect (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_persistent_reconnect (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_intra_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_intra_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_intra_bss (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_group_idle (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_group_idle (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_group_idle (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_freq_change_policy (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_freq_change_policy (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_freq_change_policy (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_passphrase_len (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_passphrase_len (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_passphrase_len (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_pref_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_pref_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_pref_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_no_go_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_no_go_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_no_go_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_add_cli_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_add_cli_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_add_cli_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_optimize_listen_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_optimize_listen_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_optimize_listen_chan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_ht40 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_ht40 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_ht40 (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_vht (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_vht (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_vht (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_disabled (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_disabled (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_disabled (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_ctwindow (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_ctwindow (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_ctwindow (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_no_group_iface (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_no_group_iface (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_no_group_iface (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_ignore_shared_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_ignore_shared_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_ignore_shared_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ip_addr_go (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ip_addr_go (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ip_addr_go (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ip_addr_mask (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ip_addr_mask (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ip_addr_mask (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ip_addr_start (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ip_addr_start (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ip_addr_start (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ip_addr_end (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ip_addr_end (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ip_addr_end (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_cli_probe (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_cli_probe (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_cli_probe (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_bss_max_count (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_bss_max_count (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_bss_max_count (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_filter_ssids (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_filter_ssids (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_filter_ssids (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_filter_rssi (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_filter_rssi (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_filter_rssi (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_max_num_sta (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_max_num_sta (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_max_num_sta (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_disassoc_low_ack (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_disassoc_low_ack (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_disassoc_low_ack (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_hessid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_hessid (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_hessid (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_go_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_go_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_go_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_go_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_go_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_go_access_network_type (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_go_internet (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_go_internet (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_go_internet (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_go_venue_group (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_go_venue_group (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_go_venue_group (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_go_venue_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_go_venue_type (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_go_venue_type (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pbc_in_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pbc_in_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pbc_in_m1 (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_autoscan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_autoscan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_autoscan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dev_pw_id (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dev_pw_id (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dev_pw_id (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dh_pubkey (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dh_pubkey (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dh_pubkey (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dh_privkey (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dh_privkey (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dh_privkey (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_nfc_dev_pw (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_nfc_dev_pw (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_nfc_dev_pw (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ext_password_backend (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ext_password_backend (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ext_password_backend (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_go_max_inactivity (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_go_max_inactivity (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_go_max_inactivity (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_auto_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_auto_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_auto_interworking (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_okc (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_okc (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_okc (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_pmf (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_pmf (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_pmf (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_sae_groups (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_sae_groups (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_sae_groups (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_dtim_period (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_dtim_period (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_dtim_period (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_beacon_int (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_beacon_int (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_beacon_int (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ap_vendor_elements (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ap_vendor_elements (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ap_vendor_elements (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ignore_old_scan_res (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ignore_old_scan_res (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ignore_old_scan_res (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_freq_list (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_freq_list (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_freq_list (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_scan_cur_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_scan_cur_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_scan_cur_freq (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_sched_scan_interval (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_sched_scan_interval (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_sched_scan_interval (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_sched_scan_start_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_sched_scan_start_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_sched_scan_start_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_tdls_external_control (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_tdls_external_control (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_tdls_external_control (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_osu_dir (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_osu_dir (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_osu_dir (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wowlan_triggers (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wowlan_triggers (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wowlan_triggers (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_p2p_search_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_p2p_search_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_p2p_search_delay (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_preassoc_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_preassoc_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_preassoc_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_key_mgmt_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_key_mgmt_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_key_mgmt_offload (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_passive_scan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_passive_scan (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_passive_scan (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_reassoc_same_bss_optim (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_reassoc_same_bss_optim (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_reassoc_same_bss_optim (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wps_priority (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wps_priority (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wps_priority (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_cert_in_cb (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_cert_in_cb (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_cert_in_cb (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_wpa_rsc_relaxation (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_wpa_rsc_relaxation (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_wpa_rsc_relaxation (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_sched_scan_plans (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_sched_scan_plans (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_sched_scan_plans (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_gas_address3 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_gas_address3 (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_gas_address3 (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ftm_responder (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ftm_responder (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ftm_responder (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_ftm_initiator (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_ftm_initiator (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_ftm_initiator (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_gas_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_gas_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_gas_rand_addr_lifetime (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_gas_rand_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_gas_rand_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_gas_rand_mac_addr (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);

const gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_get_dpp_config_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object);
gchar *wpa_interface_fi_w1_wpa_supplicant1_interface_dup_dpp_config_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object);
void wpa_interface_fi_w1_wpa_supplicant1_interface_set_dpp_config_processing (wpainterfaceFiW1Wpa_supplicant1Interface *object, const gchar *value);


/* ---- */

#define WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY (wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_get_type ())
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, wpainterfaceFiW1Wpa_supplicant1InterfaceProxy))
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, wpainterfaceFiW1Wpa_supplicant1InterfaceProxyClass))
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY, wpainterfaceFiW1Wpa_supplicant1InterfaceProxyClass))
#define WPA_INTERFACE_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY))
#define WPA_INTERFACE_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_PROXY))

typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceProxy wpainterfaceFiW1Wpa_supplicant1InterfaceProxy;
typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceProxyClass wpainterfaceFiW1Wpa_supplicant1InterfaceProxyClass;
typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceProxyPrivate wpainterfaceFiW1Wpa_supplicant1InterfaceProxyPrivate;

struct _wpainterfaceFiW1Wpa_supplicant1InterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpainterfaceFiW1Wpa_supplicant1InterfaceProxyPrivate *priv;
};

struct _wpainterfaceFiW1Wpa_supplicant1InterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceFiW1Wpa_supplicant1InterfaceProxy, g_object_unref)
#endif

void wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceFiW1Wpa_supplicant1Interface *wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceFiW1Wpa_supplicant1Interface *wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceFiW1Wpa_supplicant1Interface *wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceFiW1Wpa_supplicant1Interface *wpa_interface_fi_w1_wpa_supplicant1_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON (wpa_interface_fi_w1_wpa_supplicant1_interface_skeleton_get_type ())
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON, wpainterfaceFiW1Wpa_supplicant1InterfaceSkeleton))
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON, wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonClass))
#define WPA_INTERFACE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON, wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonClass))
#define WPA_INTERFACE_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON))
#define WPA_INTERFACE_IS_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_FI_W1_WPA_SUPPLICANT1_INTERFACE_SKELETON))

typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceSkeleton wpainterfaceFiW1Wpa_supplicant1InterfaceSkeleton;
typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonClass wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonClass;
typedef struct _wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonPrivate wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonPrivate;

struct _wpainterfaceFiW1Wpa_supplicant1InterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonPrivate *priv;
};

struct _wpainterfaceFiW1Wpa_supplicant1InterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_interface_fi_w1_wpa_supplicant1_interface_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceFiW1Wpa_supplicant1InterfaceSkeleton, g_object_unref)
#endif

wpainterfaceFiW1Wpa_supplicant1Interface *wpa_interface_fi_w1_wpa_supplicant1_interface_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.WPS */

#define WPA_INTERFACE_TYPE_WPS (wpa_interface_wps_get_type ())
#define WPA_INTERFACE_WPS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_WPS, wpainterfaceWPS))
#define WPA_INTERFACE_IS_WPS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_WPS))
#define WPA_INTERFACE_WPS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_INTERFACE_TYPE_WPS, wpainterfaceWPSIface))

struct _wpainterfaceWPS;
typedef struct _wpainterfaceWPS wpainterfaceWPS;
typedef struct _wpainterfaceWPSIface wpainterfaceWPSIface;

struct _wpainterfaceWPSIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_cancel) (
    wpainterfaceWPS *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_start) (
    wpainterfaceWPS *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  const gchar * (*get_config_methods) (wpainterfaceWPS *object);

  const gchar * (*get_device_name) (wpainterfaceWPS *object);

  const gchar * (*get_device_type) (wpainterfaceWPS *object);

  const gchar * (*get_manufacturer) (wpainterfaceWPS *object);

  const gchar * (*get_model_name) (wpainterfaceWPS *object);

  const gchar * (*get_model_number) (wpainterfaceWPS *object);

  gboolean  (*get_process_credentials) (wpainterfaceWPS *object);

  const gchar * (*get_serial_number) (wpainterfaceWPS *object);

  void (*credentials) (
    wpainterfaceWPS *object,
    GVariant *arg_credentials);

  void (*event) (
    wpainterfaceWPS *object,
    const gchar *arg_name,
    GVariant *arg_args);

  void (*properties_changed) (
    wpainterfaceWPS *object,
    GVariant *arg_properties);

};

GType wpa_interface_wps_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_interface_wps_interface_info (void);
guint wpa_interface_wps_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_interface_wps_complete_start (
    wpainterfaceWPS *object,
    GDBusMethodInvocation *invocation,
    GVariant *output);

void wpa_interface_wps_complete_cancel (
    wpainterfaceWPS *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wpa_interface_wps_emit_event (
    wpainterfaceWPS *object,
    const gchar *arg_name,
    GVariant *arg_args);

void wpa_interface_wps_emit_credentials (
    wpainterfaceWPS *object,
    GVariant *arg_credentials);

void wpa_interface_wps_emit_properties_changed (
    wpainterfaceWPS *object,
    GVariant *arg_properties);



/* D-Bus method calls: */
void wpa_interface_wps_call_start (
    wpainterfaceWPS *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_wps_call_start_finish (
    wpainterfaceWPS *proxy,
    GVariant **out_output,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_wps_call_start_sync (
    wpainterfaceWPS *proxy,
    GVariant *arg_args,
    GVariant **out_output,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_wps_call_cancel (
    wpainterfaceWPS *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_wps_call_cancel_finish (
    wpainterfaceWPS *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_wps_call_cancel_sync (
    wpainterfaceWPS *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean wpa_interface_wps_get_process_credentials (wpainterfaceWPS *object);
void wpa_interface_wps_set_process_credentials (wpainterfaceWPS *object, gboolean value);

const gchar *wpa_interface_wps_get_config_methods (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_config_methods (wpainterfaceWPS *object);
void wpa_interface_wps_set_config_methods (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_device_name (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_device_name (wpainterfaceWPS *object);
void wpa_interface_wps_set_device_name (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_manufacturer (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_manufacturer (wpainterfaceWPS *object);
void wpa_interface_wps_set_manufacturer (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_model_name (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_model_name (wpainterfaceWPS *object);
void wpa_interface_wps_set_model_name (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_model_number (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_model_number (wpainterfaceWPS *object);
void wpa_interface_wps_set_model_number (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_serial_number (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_serial_number (wpainterfaceWPS *object);
void wpa_interface_wps_set_serial_number (wpainterfaceWPS *object, const gchar *value);

const gchar *wpa_interface_wps_get_device_type (wpainterfaceWPS *object);
gchar *wpa_interface_wps_dup_device_type (wpainterfaceWPS *object);
void wpa_interface_wps_set_device_type (wpainterfaceWPS *object, const gchar *value);


/* ---- */

#define WPA_INTERFACE_TYPE_WPS_PROXY (wpa_interface_wps_proxy_get_type ())
#define WPA_INTERFACE_WPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_WPS_PROXY, wpainterfaceWPSProxy))
#define WPA_INTERFACE_WPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_WPS_PROXY, wpainterfaceWPSProxyClass))
#define WPA_INTERFACE_WPS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_WPS_PROXY, wpainterfaceWPSProxyClass))
#define WPA_INTERFACE_IS_WPS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_WPS_PROXY))
#define WPA_INTERFACE_IS_WPS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_WPS_PROXY))

typedef struct _wpainterfaceWPSProxy wpainterfaceWPSProxy;
typedef struct _wpainterfaceWPSProxyClass wpainterfaceWPSProxyClass;
typedef struct _wpainterfaceWPSProxyPrivate wpainterfaceWPSProxyPrivate;

struct _wpainterfaceWPSProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpainterfaceWPSProxyPrivate *priv;
};

struct _wpainterfaceWPSProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_interface_wps_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceWPSProxy, g_object_unref)
#endif

void wpa_interface_wps_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceWPS *wpa_interface_wps_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceWPS *wpa_interface_wps_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_interface_wps_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceWPS *wpa_interface_wps_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceWPS *wpa_interface_wps_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_INTERFACE_TYPE_WPS_SKELETON (wpa_interface_wps_skeleton_get_type ())
#define WPA_INTERFACE_WPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_WPS_SKELETON, wpainterfaceWPSSkeleton))
#define WPA_INTERFACE_WPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_WPS_SKELETON, wpainterfaceWPSSkeletonClass))
#define WPA_INTERFACE_WPS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_WPS_SKELETON, wpainterfaceWPSSkeletonClass))
#define WPA_INTERFACE_IS_WPS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_WPS_SKELETON))
#define WPA_INTERFACE_IS_WPS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_WPS_SKELETON))

typedef struct _wpainterfaceWPSSkeleton wpainterfaceWPSSkeleton;
typedef struct _wpainterfaceWPSSkeletonClass wpainterfaceWPSSkeletonClass;
typedef struct _wpainterfaceWPSSkeletonPrivate wpainterfaceWPSSkeletonPrivate;

struct _wpainterfaceWPSSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpainterfaceWPSSkeletonPrivate *priv;
};

struct _wpainterfaceWPSSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_interface_wps_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceWPSSkeleton, g_object_unref)
#endif

wpainterfaceWPS *wpa_interface_wps_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.P2PDevice */

#define WPA_INTERFACE_TYPE_P2_PDEVICE (wpa_interface_p2_pdevice_get_type ())
#define WPA_INTERFACE_P2_PDEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_P2_PDEVICE, wpainterfaceP2PDevice))
#define WPA_INTERFACE_IS_P2_PDEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_P2_PDEVICE))
#define WPA_INTERFACE_P2_PDEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_INTERFACE_TYPE_P2_PDEVICE, wpainterfaceP2PDeviceIface))

struct _wpainterfaceP2PDevice;
typedef struct _wpainterfaceP2PDevice wpainterfaceP2PDevice;
typedef struct _wpainterfaceP2PDeviceIface wpainterfaceP2PDeviceIface;

struct _wpainterfaceP2PDeviceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_persistent_group) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_add_service) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_cancel) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_delete_service) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_disconnect) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_extended_listen) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_find) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_flush) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_flush_service) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_group_add) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_invite) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_listen) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    gint arg_timeout);

  gboolean (*handle_presence_request) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_provision_discovery_request) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_peer,
    const gchar *arg_config_method);

  gboolean (*handle_reject_peer) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_peer);

  gboolean (*handle_remove_all_persistent_groups) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_client) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_remove_persistent_group) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  gboolean (*handle_service_discovery_cancel_request) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    guint64 arg_args);

  gboolean (*handle_service_discovery_external) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    gint arg_arg);

  gboolean (*handle_service_discovery_request) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_service_discovery_response) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_service_update) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_find) (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_group) (wpainterfaceP2PDevice *object);

  GVariant * (*get_p2_pdevice_config) (wpainterfaceP2PDevice *object);

  const gchar * (*get_peer_go) (wpainterfaceP2PDevice *object);

  const gchar *const * (*get_peers) (wpainterfaceP2PDevice *object);

  const gchar *const * (*get_persistent_groups) (wpainterfaceP2PDevice *object);

  const gchar * (*get_role) (wpainterfaceP2PDevice *object);

  void (*device_found) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

  void (*device_found_properties) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*device_lost) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

  void (*find_stopped) (
    wpainterfaceP2PDevice *object);

  void (*gonegotiation_failure) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

  void (*gonegotiation_request) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    guint16 arg_dev_passwd_id,
    guchar arg_device_go_intent);

  void (*gonegotiation_success) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

  void (*group_finished) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

  void (*group_formation_failure) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_reason);

  void (*group_started) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

  void (*invitation_received) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

  void (*invitation_result) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_invite_result);

  void (*persistent_group_added) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*persistent_group_removed) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

  void (*provision_discovery_failure) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    gint arg_status);

  void (*provision_discovery_pbcrequest) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

  void (*provision_discovery_pbcresponse) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

  void (*provision_discovery_request_display_pin) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    const gchar *arg_pin);

  void (*provision_discovery_request_enter_pin) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

  void (*provision_discovery_response_display_pin) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    const gchar *arg_pin);

  void (*provision_discovery_response_enter_pin) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

  void (*service_discovery_request) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_sd_request);

  void (*service_discovery_response) (
    wpainterfaceP2PDevice *object,
    GVariant *arg_sd_response);

  void (*wps_failed) (
    wpainterfaceP2PDevice *object,
    const gchar *arg_name,
    GVariant *arg_args);

};

GType wpa_interface_p2_pdevice_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_interface_p2_pdevice_interface_info (void);
guint wpa_interface_p2_pdevice_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_interface_p2_pdevice_complete_find (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_stop_find (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_listen (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_extended_listen (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_presence_request (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_provision_discovery_request (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_connect (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *generated_pin);

void wpa_interface_p2_pdevice_complete_group_add (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_cancel (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_invite (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_disconnect (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_reject_peer (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_remove_client (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_flush (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_add_service (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_delete_service (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_flush_service (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_service_discovery_request (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    guint64 ref);

void wpa_interface_p2_pdevice_complete_service_discovery_response (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_service_discovery_cancel_request (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_service_update (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_service_discovery_external (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_add_persistent_group (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpa_interface_p2_pdevice_complete_remove_persistent_group (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);

void wpa_interface_p2_pdevice_complete_remove_all_persistent_groups (
    wpainterfaceP2PDevice *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wpa_interface_p2_pdevice_emit_device_found (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

void wpa_interface_p2_pdevice_emit_device_found_properties (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_device_lost (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

void wpa_interface_p2_pdevice_emit_find_stopped (
    wpainterfaceP2PDevice *object);

void wpa_interface_p2_pdevice_emit_provision_discovery_request_display_pin (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    const gchar *arg_pin);

void wpa_interface_p2_pdevice_emit_provision_discovery_response_display_pin (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    const gchar *arg_pin);

void wpa_interface_p2_pdevice_emit_provision_discovery_request_enter_pin (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

void wpa_interface_p2_pdevice_emit_provision_discovery_response_enter_pin (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

void wpa_interface_p2_pdevice_emit_provision_discovery_pbcrequest (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

void wpa_interface_p2_pdevice_emit_provision_discovery_pbcresponse (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object);

void wpa_interface_p2_pdevice_emit_provision_discovery_failure (
    wpainterfaceP2PDevice *object,
    const gchar *arg_peer_object,
    gint arg_status);

void wpa_interface_p2_pdevice_emit_group_started (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_group_formation_failure (
    wpainterfaceP2PDevice *object,
    const gchar *arg_reason);

void wpa_interface_p2_pdevice_emit_gonegotiation_success (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_gonegotiation_failure (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_gonegotiation_request (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    guint16 arg_dev_passwd_id,
    guchar arg_device_go_intent);

void wpa_interface_p2_pdevice_emit_invitation_result (
    wpainterfaceP2PDevice *object,
    GVariant *arg_invite_result);

void wpa_interface_p2_pdevice_emit_group_finished (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_service_discovery_request (
    wpainterfaceP2PDevice *object,
    GVariant *arg_sd_request);

void wpa_interface_p2_pdevice_emit_service_discovery_response (
    wpainterfaceP2PDevice *object,
    GVariant *arg_sd_response);

void wpa_interface_p2_pdevice_emit_persistent_group_added (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpa_interface_p2_pdevice_emit_persistent_group_removed (
    wpainterfaceP2PDevice *object,
    const gchar *arg_path);

void wpa_interface_p2_pdevice_emit_wps_failed (
    wpainterfaceP2PDevice *object,
    const gchar *arg_name,
    GVariant *arg_args);

void wpa_interface_p2_pdevice_emit_invitation_received (
    wpainterfaceP2PDevice *object,
    GVariant *arg_properties);



/* D-Bus method calls: */
void wpa_interface_p2_pdevice_call_find (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_find_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_find_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_stop_find (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_stop_find_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_stop_find_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_listen (
    wpainterfaceP2PDevice *proxy,
    gint arg_timeout,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_listen_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_listen_sync (
    wpainterfaceP2PDevice *proxy,
    gint arg_timeout,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_extended_listen (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_extended_listen_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_extended_listen_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_presence_request (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_presence_request_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_presence_request_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_provision_discovery_request (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_peer,
    const gchar *arg_config_method,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_provision_discovery_request_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_provision_discovery_request_sync (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_peer,
    const gchar *arg_config_method,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_connect (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_connect_finish (
    wpainterfaceP2PDevice *proxy,
    gchar **out_generated_pin,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_connect_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    gchar **out_generated_pin,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_group_add (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_group_add_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_group_add_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_cancel (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_cancel_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_cancel_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_invite (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_invite_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_invite_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_disconnect (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_disconnect_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_disconnect_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_reject_peer (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_peer,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_reject_peer_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_reject_peer_sync (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_peer,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_remove_client (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_remove_client_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_remove_client_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_flush (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_flush_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_flush_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_add_service (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_add_service_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_add_service_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_delete_service (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_delete_service_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_delete_service_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_flush_service (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_flush_service_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_flush_service_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_service_discovery_request (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_service_discovery_request_finish (
    wpainterfaceP2PDevice *proxy,
    guint64 *out_ref,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_service_discovery_request_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    guint64 *out_ref,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_service_discovery_response (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_service_discovery_response_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_service_discovery_response_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_service_discovery_cancel_request (
    wpainterfaceP2PDevice *proxy,
    guint64 arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_service_discovery_cancel_request_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_service_discovery_cancel_request_sync (
    wpainterfaceP2PDevice *proxy,
    guint64 arg_args,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_service_update (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_service_update_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_service_update_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_service_discovery_external (
    wpainterfaceP2PDevice *proxy,
    gint arg_arg,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_service_discovery_external_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_service_discovery_external_sync (
    wpainterfaceP2PDevice *proxy,
    gint arg_arg,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_add_persistent_group (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_add_persistent_group_finish (
    wpainterfaceP2PDevice *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_add_persistent_group_sync (
    wpainterfaceP2PDevice *proxy,
    GVariant *arg_args,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_remove_persistent_group (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_remove_persistent_group_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_remove_persistent_group_sync (
    wpainterfaceP2PDevice *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpa_interface_p2_pdevice_call_remove_all_persistent_groups (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_interface_p2_pdevice_call_remove_all_persistent_groups_finish (
    wpainterfaceP2PDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_interface_p2_pdevice_call_remove_all_persistent_groups_sync (
    wpainterfaceP2PDevice *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
GVariant *wpa_interface_p2_pdevice_get_p2_pdevice_config (wpainterfaceP2PDevice *object);
GVariant *wpa_interface_p2_pdevice_dup_p2_pdevice_config (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_p2_pdevice_config (wpainterfaceP2PDevice *object, GVariant *value);

const gchar *const *wpa_interface_p2_pdevice_get_peers (wpainterfaceP2PDevice *object);
gchar **wpa_interface_p2_pdevice_dup_peers (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_peers (wpainterfaceP2PDevice *object, const gchar *const *value);

const gchar *wpa_interface_p2_pdevice_get_role (wpainterfaceP2PDevice *object);
gchar *wpa_interface_p2_pdevice_dup_role (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_role (wpainterfaceP2PDevice *object, const gchar *value);

const gchar *wpa_interface_p2_pdevice_get_group (wpainterfaceP2PDevice *object);
gchar *wpa_interface_p2_pdevice_dup_group (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_group (wpainterfaceP2PDevice *object, const gchar *value);

const gchar *wpa_interface_p2_pdevice_get_peer_go (wpainterfaceP2PDevice *object);
gchar *wpa_interface_p2_pdevice_dup_peer_go (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_peer_go (wpainterfaceP2PDevice *object, const gchar *value);

const gchar *const *wpa_interface_p2_pdevice_get_persistent_groups (wpainterfaceP2PDevice *object);
gchar **wpa_interface_p2_pdevice_dup_persistent_groups (wpainterfaceP2PDevice *object);
void wpa_interface_p2_pdevice_set_persistent_groups (wpainterfaceP2PDevice *object, const gchar *const *value);


/* ---- */

#define WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY (wpa_interface_p2_pdevice_proxy_get_type ())
#define WPA_INTERFACE_P2_PDEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY, wpainterfaceP2PDeviceProxy))
#define WPA_INTERFACE_P2_PDEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY, wpainterfaceP2PDeviceProxyClass))
#define WPA_INTERFACE_P2_PDEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY, wpainterfaceP2PDeviceProxyClass))
#define WPA_INTERFACE_IS_P2_PDEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY))
#define WPA_INTERFACE_IS_P2_PDEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY))

typedef struct _wpainterfaceP2PDeviceProxy wpainterfaceP2PDeviceProxy;
typedef struct _wpainterfaceP2PDeviceProxyClass wpainterfaceP2PDeviceProxyClass;
typedef struct _wpainterfaceP2PDeviceProxyPrivate wpainterfaceP2PDeviceProxyPrivate;

struct _wpainterfaceP2PDeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpainterfaceP2PDeviceProxyPrivate *priv;
};

struct _wpainterfaceP2PDeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_interface_p2_pdevice_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceP2PDeviceProxy, g_object_unref)
#endif

void wpa_interface_p2_pdevice_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceP2PDevice *wpa_interface_p2_pdevice_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceP2PDevice *wpa_interface_p2_pdevice_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_interface_p2_pdevice_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpainterfaceP2PDevice *wpa_interface_p2_pdevice_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpainterfaceP2PDevice *wpa_interface_p2_pdevice_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON (wpa_interface_p2_pdevice_skeleton_get_type ())
#define WPA_INTERFACE_P2_PDEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON, wpainterfaceP2PDeviceSkeleton))
#define WPA_INTERFACE_P2_PDEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON, wpainterfaceP2PDeviceSkeletonClass))
#define WPA_INTERFACE_P2_PDEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON, wpainterfaceP2PDeviceSkeletonClass))
#define WPA_INTERFACE_IS_P2_PDEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON))
#define WPA_INTERFACE_IS_P2_PDEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON))

typedef struct _wpainterfaceP2PDeviceSkeleton wpainterfaceP2PDeviceSkeleton;
typedef struct _wpainterfaceP2PDeviceSkeletonClass wpainterfaceP2PDeviceSkeletonClass;
typedef struct _wpainterfaceP2PDeviceSkeletonPrivate wpainterfaceP2PDeviceSkeletonPrivate;

struct _wpainterfaceP2PDeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpainterfaceP2PDeviceSkeletonPrivate *priv;
};

struct _wpainterfaceP2PDeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_interface_p2_pdevice_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpainterfaceP2PDeviceSkeleton, g_object_unref)
#endif

wpainterfaceP2PDevice *wpa_interface_p2_pdevice_skeleton_new (void);


G_END_DECLS

#endif /* __WPA_INTERFACE_H__ */
