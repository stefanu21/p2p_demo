/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __WPA_INTERFACE_H__
#define __WPA_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE                                     \
  (wpa_interface_org_freedesktop_dbus_introspectable_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,         \
                              WpaInterfaceOrgFreedesktopDBusIntrospectable))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o)                             \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,      \
                                 WpaInterfaceOrgFreedesktopDBusIntrospectableIface))

struct _WpaInterfaceOrgFreedesktopDBusIntrospectable;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectable
  WpaInterfaceOrgFreedesktopDBusIntrospectable;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableIface
  WpaInterfaceOrgFreedesktopDBusIntrospectableIface;

struct _WpaInterfaceOrgFreedesktopDBusIntrospectableIface {
  GTypeInterface parent_iface;

  gboolean (*handle_introspect)(WpaInterfaceOrgFreedesktopDBusIntrospectable *object,
                                GDBusMethodInvocation *invocation);
};

GType
wpa_interface_org_freedesktop_dbus_introspectable_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_interface_org_freedesktop_dbus_introspectable_interface_info(void);
guint
wpa_interface_org_freedesktop_dbus_introspectable_override_properties(GObjectClass *klass,
                                                                      guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_interface_org_freedesktop_dbus_introspectable_complete_introspect(
  WpaInterfaceOrgFreedesktopDBusIntrospectable *object, GDBusMethodInvocation *invocation,
  const gchar *data);

/* D-Bus method calls: */
void
wpa_interface_org_freedesktop_dbus_introspectable_call_introspect(
  WpaInterfaceOrgFreedesktopDBusIntrospectable *proxy, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_org_freedesktop_dbus_introspectable_call_introspect_finish(
  WpaInterfaceOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GAsyncResult *res,
  GError **error);

gboolean
wpa_interface_org_freedesktop_dbus_introspectable_call_introspect_sync(
  WpaInterfaceOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GCancellable *cancellable,
  GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY                               \
  (wpa_interface_org_freedesktop_dbus_introspectable_proxy_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                 \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,   \
                              WpaInterfaceOrgFreedesktopDBusIntrospectableProxy))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                           \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,      \
                           WpaInterfaceOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o)                       \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,    \
                             WpaInterfaceOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                              \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                        \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableProxy
  WpaInterfaceOrgFreedesktopDBusIntrospectableProxy;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableProxyClass
  WpaInterfaceOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableProxyPrivate
  WpaInterfaceOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _WpaInterfaceOrgFreedesktopDBusIntrospectableProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaInterfaceOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _WpaInterfaceOrgFreedesktopDBusIntrospectableProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_interface_org_freedesktop_dbus_introspectable_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceOrgFreedesktopDBusIntrospectable *
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_finish(GAsyncResult *res,
                                                                   GError **error);
WpaInterfaceOrgFreedesktopDBusIntrospectable *
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceOrgFreedesktopDBusIntrospectable *
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                           GError **error);
WpaInterfaceOrgFreedesktopDBusIntrospectable *
wpa_interface_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON                            \
  (wpa_interface_org_freedesktop_dbus_introspectable_skeleton_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                              \
  (G_TYPE_CHECK_INSTANCE_CAST((o),                                                                 \
                              WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,     \
                              WpaInterfaceOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                        \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,   \
                           WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, \
                             WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                           \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                     \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableSkeleton
  WpaInterfaceOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonClass
  WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate
  WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _WpaInterfaceOrgFreedesktopDBusIntrospectableSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _WpaInterfaceOrgFreedesktopDBusIntrospectableSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_interface_org_freedesktop_dbus_introspectable_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

WpaInterfaceOrgFreedesktopDBusIntrospectable *
wpa_interface_org_freedesktop_dbus_introspectable_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES                                         \
  (wpa_interface_org_freedesktop_dbus_properties_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                           \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,             \
                              WpaInterfaceOrgFreedesktopDBusProperties))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                        \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o)                                 \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,          \
                                 WpaInterfaceOrgFreedesktopDBusPropertiesIface))

struct _WpaInterfaceOrgFreedesktopDBusProperties;
typedef struct _WpaInterfaceOrgFreedesktopDBusProperties WpaInterfaceOrgFreedesktopDBusProperties;
typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesIface
  WpaInterfaceOrgFreedesktopDBusPropertiesIface;

struct _WpaInterfaceOrgFreedesktopDBusPropertiesIface {
  GTypeInterface parent_iface;

  gboolean (*handle_get)(WpaInterfaceOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname);

  gboolean (*handle_get_all)(WpaInterfaceOrgFreedesktopDBusProperties *object,
                             GDBusMethodInvocation *invocation, const gchar *arg_interface);

  gboolean (*handle_set)(WpaInterfaceOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname, GVariant *arg_value);
};

GType
wpa_interface_org_freedesktop_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_interface_org_freedesktop_dbus_properties_interface_info(void);
guint
wpa_interface_org_freedesktop_dbus_properties_override_properties(GObjectClass *klass,
                                                                  guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_interface_org_freedesktop_dbus_properties_complete_get(
  WpaInterfaceOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation,
  GVariant *value);

void
wpa_interface_org_freedesktop_dbus_properties_complete_get_all(
  WpaInterfaceOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation,
  GVariant *props);

void
wpa_interface_org_freedesktop_dbus_properties_complete_set(
  WpaInterfaceOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation);

/* D-Bus method calls: */
void
wpa_interface_org_freedesktop_dbus_properties_call_get(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GCancellable *cancellable, GAsyncReadyCallback callback,
  gpointer user_data);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_get_finish(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, GVariant **out_value, GAsyncResult *res,
  GError **error);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_get_sync(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant **out_value, GCancellable *cancellable, GError **error);

void
wpa_interface_org_freedesktop_dbus_properties_call_get_all(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_get_all_finish(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, GVariant **out_props, GAsyncResult *res,
  GError **error);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_get_all_sync(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface, GVariant **out_props,
  GCancellable *cancellable, GError **error);

void
wpa_interface_org_freedesktop_dbus_properties_call_set(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant *arg_value, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_set_finish(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface_org_freedesktop_dbus_properties_call_set_sync(
  WpaInterfaceOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant *arg_value, GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY                                   \
  (wpa_interface_org_freedesktop_dbus_properties_proxy_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                     \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,       \
                              WpaInterfaceOrgFreedesktopDBusPropertiesProxy))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                               \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,          \
                           WpaInterfaceOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                           \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,        \
                             WpaInterfaceOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                  \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                            \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesProxy
  WpaInterfaceOrgFreedesktopDBusPropertiesProxy;
typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesProxyClass
  WpaInterfaceOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesProxyPrivate
  WpaInterfaceOrgFreedesktopDBusPropertiesProxyPrivate;

struct _WpaInterfaceOrgFreedesktopDBusPropertiesProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaInterfaceOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _WpaInterfaceOrgFreedesktopDBusPropertiesProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_interface_org_freedesktop_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void
wpa_interface_org_freedesktop_dbus_properties_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceOrgFreedesktopDBusProperties *
wpa_interface_org_freedesktop_dbus_properties_proxy_new_finish(GAsyncResult *res, GError **error);
WpaInterfaceOrgFreedesktopDBusProperties *
wpa_interface_org_freedesktop_dbus_properties_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceOrgFreedesktopDBusProperties *
wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                       GError **error);
WpaInterfaceOrgFreedesktopDBusProperties *
wpa_interface_org_freedesktop_dbus_properties_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON                                \
  (wpa_interface_org_freedesktop_dbus_properties_skeleton_get_type())
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                  \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,    \
                              WpaInterfaceOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                            \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,       \
                           WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_INTERFACE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                        \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,     \
                             WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_INTERFACE_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                         \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesSkeleton
  WpaInterfaceOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonClass
  WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate
  WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _WpaInterfaceOrgFreedesktopDBusPropertiesSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _WpaInterfaceOrgFreedesktopDBusPropertiesSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_interface_org_freedesktop_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

WpaInterfaceOrgFreedesktopDBusProperties *
wpa_interface_org_freedesktop_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface */

#define WPA_INTERFACE_TYPE_  (wpa_interface__get_type())
#define WPA_INTERFACE_(o)    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_, WpaInterface))
#define WPA_INTERFACE_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_))
#define WPA_INTERFACE__GET_IFACE(o)                                                                \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_INTERFACE_TYPE_, WpaInterfaceIface))

struct _WpaInterface;
typedef struct _WpaInterface WpaInterface;
typedef struct _WpaInterfaceIface WpaInterfaceIface;

struct _WpaInterfaceIface {
  GTypeInterface parent_iface;

  gboolean (*handle_abort_scan)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_add_blob)(WpaInterface *object, GDBusMethodInvocation *invocation,
                              const gchar *arg_name, const gchar *arg_data);

  gboolean (*handle_add_network)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                 GVariant *arg_args);

  gboolean (*handle_disconnect)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_eaplogoff)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_eaplogon)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_flush_bss)(WpaInterface *object, GDBusMethodInvocation *invocation,
                               guint arg_age);

  gboolean (*handle_get_blob)(WpaInterface *object, GDBusMethodInvocation *invocation,
                              const gchar *arg_name);

  gboolean (*handle_network_reply)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                   const gchar *arg_path, const gchar *arg_field,
                                   const gchar *arg_value);

  gboolean (*handle_reassociate)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_reattach)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_reconnect)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_all_networks)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_blob)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                 const gchar *arg_name);

  gboolean (*handle_remove_network)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                    const gchar *arg_path);

  gboolean (*handle_save_config)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_scan)(WpaInterface *object, GDBusMethodInvocation *invocation,
                          GVariant *arg_args);

  gboolean (*handle_select_network)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                    const gchar *arg_path);

  gboolean (*handle_set_pkcs11_engine_and_module_path)(WpaInterface *object,
                                                       GDBusMethodInvocation *invocation,
                                                       const gchar *arg_pkcs11_engine_path,
                                                       const gchar *arg_pkcs11_module_path);

  gboolean (*handle_signal_poll)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_subscribe_probe_req)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_unsubscribe_probe_req)(WpaInterface *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_vendor_elem_add)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                     gint arg_frame_id, const gchar *arg_ielems);

  gboolean (*handle_vendor_elem_get)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                     gint arg_frame_id);

  gboolean (*handle_vendor_elem_rem)(WpaInterface *object, GDBusMethodInvocation *invocation,
                                     gint arg_frame_id, const gchar *arg_ielems);

  const gchar *(*get_access_network_type)(WpaInterface *object);

  guint (*get_ap_scan)(WpaInterface *object);

  const gchar *(*get_ap_vendor_elements)(WpaInterface *object);

  gint (*get_assoc_status_code)(WpaInterface *object);

  const gchar *(*get_auto_interworking)(WpaInterface *object);

  const gchar *(*get_auto_uuid)(WpaInterface *object);

  const gchar *(*get_autoscan)(WpaInterface *object);

  const gchar *(*get_beacon_int)(WpaInterface *object);

  const gchar *(*get_bgscan)(WpaInterface *object);

  GVariant *(*get_blobs)(WpaInterface *object);

  const gchar *(*get_bridge_ifname)(WpaInterface *object);

  const gchar *(*get_bss_max_count)(WpaInterface *object);

  guint (*get_bssexpire_age)(WpaInterface *object);

  guint (*get_bssexpire_count)(WpaInterface *object);

  const gchar *const *(*get_bsss)(WpaInterface *object);

  GVariant *(*get_capabilities)(WpaInterface *object);

  const gchar *(*get_cert_in_cb)(WpaInterface *object);

  const gchar *(*get_config_file)(WpaInterface *object);

  const gchar *(*get_config_methods)(WpaInterface *object);

  const gchar *(*get_country)(WpaInterface *object);

  const gchar *(*get_ctrl_interface)(WpaInterface *object);

  const gchar *(*get_ctrl_interface_group)(WpaInterface *object);

  const gchar *(*get_current_auth_mode)(WpaInterface *object);

  const gchar *(*get_current_bss)(WpaInterface *object);

  const gchar *(*get_current_network)(WpaInterface *object);

  const gchar *(*get_device_name)(WpaInterface *object);

  const gchar *(*get_device_type)(WpaInterface *object);

  const gchar *(*get_disable_scan_offload)(WpaInterface *object);

  const gchar *(*get_disassoc_low_ack)(WpaInterface *object);

  gint (*get_disconnect_reason)(WpaInterface *object);

  const gchar *(*get_dot11_rsnaconfig_pmklifetime)(WpaInterface *object);

  const gchar *(*get_dot11_rsnaconfig_pmkreauth_threshold)(WpaInterface *object);

  const gchar *(*get_dot11_rsnaconfig_satimeout)(WpaInterface *object);

  const gchar *(*get_dpp_config_processing)(WpaInterface *object);

  const gchar *(*get_driver)(WpaInterface *object);

  const gchar *(*get_driver_param)(WpaInterface *object);

  const gchar *(*get_dtim_period)(WpaInterface *object);

  const gchar *(*get_eapol_version)(WpaInterface *object);

  const gchar *(*get_ext_password_backend)(WpaInterface *object);

  const gchar *(*get_external_sim)(WpaInterface *object);

  gboolean (*get_fast_reauth)(WpaInterface *object);

  const gchar *(*get_filter_rssi)(WpaInterface *object);

  const gchar *(*get_filter_ssids)(WpaInterface *object);

  const gchar *(*get_freq_list)(WpaInterface *object);

  const gchar *(*get_ftm_initiator)(WpaInterface *object);

  const gchar *(*get_ftm_responder)(WpaInterface *object);

  const gchar *(*get_gas_address3)(WpaInterface *object);

  const gchar *(*get_gas_rand_addr_lifetime)(WpaInterface *object);

  const gchar *(*get_gas_rand_mac_addr)(WpaInterface *object);

  const gchar *(*get_go_access_network_type)(WpaInterface *object);

  const gchar *(*get_go_internet)(WpaInterface *object);

  const gchar *(*get_go_interworking)(WpaInterface *object);

  const gchar *(*get_go_venue_group)(WpaInterface *object);

  const gchar *(*get_go_venue_type)(WpaInterface *object);

  const gchar *(*get_hessid)(WpaInterface *object);

  const gchar *(*get_ifname)(WpaInterface *object);

  const gchar *(*get_ignore_old_scan_res)(WpaInterface *object);

  const gchar *(*get_interworking)(WpaInterface *object);

  const gchar *(*get_ip_addr_end)(WpaInterface *object);

  const gchar *(*get_ip_addr_go)(WpaInterface *object);

  const gchar *(*get_ip_addr_mask)(WpaInterface *object);

  const gchar *(*get_ip_addr_start)(WpaInterface *object);

  const gchar *(*get_key_mgmt_offload)(WpaInterface *object);

  const gchar *(*get_mac_addr)(WpaInterface *object);

  const gchar *(*get_manufacturer)(WpaInterface *object);

  const gchar *(*get_max_num_sta)(WpaInterface *object);

  const gchar *(*get_model_name)(WpaInterface *object);

  const gchar *(*get_model_number)(WpaInterface *object);

  const gchar *const *(*get_networks)(WpaInterface *object);

  const gchar *(*get_okc)(WpaInterface *object);

  const gchar *(*get_opensc_engine_path)(WpaInterface *object);

  const gchar *(*get_openssl_ciphers)(WpaInterface *object);

  const gchar *(*get_os_version)(WpaInterface *object);

  const gchar *(*get_osu_dir)(WpaInterface *object);

  const gchar *(*get_p2p_add_cli_chan)(WpaInterface *object);

  const gchar *(*get_p2p_cli_probe)(WpaInterface *object);

  const gchar *(*get_p2p_disabled)(WpaInterface *object);

  const gchar *(*get_p2p_go_ctwindow)(WpaInterface *object);

  const gchar *(*get_p2p_go_freq_change_policy)(WpaInterface *object);

  const gchar *(*get_p2p_go_ht40)(WpaInterface *object);

  const gchar *(*get_p2p_go_intent)(WpaInterface *object);

  const gchar *(*get_p2p_go_max_inactivity)(WpaInterface *object);

  const gchar *(*get_p2p_go_vht)(WpaInterface *object);

  const gchar *(*get_p2p_group_idle)(WpaInterface *object);

  const gchar *(*get_p2p_ignore_shared_freq)(WpaInterface *object);

  const gchar *(*get_p2p_intra_bss)(WpaInterface *object);

  const gchar *(*get_p2p_listen_channel)(WpaInterface *object);

  const gchar *(*get_p2p_listen_reg_class)(WpaInterface *object);

  const gchar *(*get_p2p_no_go_freq)(WpaInterface *object);

  const gchar *(*get_p2p_no_group_iface)(WpaInterface *object);

  const gchar *(*get_p2p_oper_channel)(WpaInterface *object);

  const gchar *(*get_p2p_oper_reg_class)(WpaInterface *object);

  const gchar *(*get_p2p_optimize_listen_chan)(WpaInterface *object);

  const gchar *(*get_p2p_passphrase_len)(WpaInterface *object);

  const gchar *(*get_p2p_pref_chan)(WpaInterface *object);

  const gchar *(*get_p2p_search_delay)(WpaInterface *object);

  const gchar *(*get_p2p_ssid_postfix)(WpaInterface *object);

  const gchar *(*get_passive_scan)(WpaInterface *object);

  const gchar *(*get_pbc_in_m1)(WpaInterface *object);

  const gchar *(*get_pcsc_pin)(WpaInterface *object);

  const gchar *(*get_pcsc_reader)(WpaInterface *object);

  const gchar *(*get_persistent_reconnect)(WpaInterface *object);

  const gchar *(*get_pkcs11_engine_path)(WpaInterface *object);

  const gchar *(*get_pkcs11_module_path)(WpaInterface *object);

  const gchar *(*get_pmf)(WpaInterface *object);

  const gchar *(*get_preassoc_mac_addr)(WpaInterface *object);

  const gchar *(*get_rand_addr_lifetime)(WpaInterface *object);

  const gchar *(*get_reassoc_same_bss_optim)(WpaInterface *object);

  const gchar *(*get_sae_groups)(WpaInterface *object);

  const gchar *(*get_scan_cur_freq)(WpaInterface *object);

  gint (*get_scan_interval)(WpaInterface *object);

  gboolean (*get_scanning)(WpaInterface *object);

  const gchar *(*get_sched_scan_interval)(WpaInterface *object);

  const gchar *(*get_sched_scan_plans)(WpaInterface *object);

  const gchar *(*get_sched_scan_start_delay)(WpaInterface *object);

  const gchar *(*get_sec_device_type)(WpaInterface *object);

  const gchar *(*get_serial_number)(WpaInterface *object);

  const gchar *(*get_state)(WpaInterface *object);

  const gchar *(*get_tdls_external_control)(WpaInterface *object);

  const gchar *(*get_update_config)(WpaInterface *object);

  const gchar *(*get_uuid)(WpaInterface *object);

  const gchar *(*get_wowlan_triggers)(WpaInterface *object);

  const gchar *(*get_wpa_rsc_relaxation)(WpaInterface *object);

  const gchar *(*get_wps_cred_processing)(WpaInterface *object);

  const gchar *(*get_wps_nfc_dev_pw)(WpaInterface *object);

  const gchar *(*get_wps_nfc_dev_pw_id)(WpaInterface *object);

  const gchar *(*get_wps_nfc_dh_privkey)(WpaInterface *object);

  const gchar *(*get_wps_nfc_dh_pubkey)(WpaInterface *object);

  const gchar *(*get_wps_priority)(WpaInterface *object);

  const gchar *(*get_wps_vendor_ext_m1)(WpaInterface *object);

  void (*blob_added)(WpaInterface *object, const gchar *arg_name);

  void (*blob_removed)(WpaInterface *object, const gchar *arg_name);

  void (*bssadded)(WpaInterface *object, const gchar *arg_path, GVariant *arg_properties);

  void (*bssremoved)(WpaInterface *object, const gchar *arg_path);

  void (*certification)(WpaInterface *object, GVariant *arg_certification);

  void (*eap)(WpaInterface *object, const gchar *arg_status, const gchar *arg_parameter);

  void (*network_added)(WpaInterface *object, const gchar *arg_path, GVariant *arg_properties);

  void (*network_removed)(WpaInterface *object, const gchar *arg_path);

  void (*network_request)(WpaInterface *object, const gchar *arg_path, const gchar *arg_field,
                          const gchar *arg_text);

  void (*network_selected)(WpaInterface *object, const gchar *arg_path);

  void (*probe_request)(WpaInterface *object, GVariant *arg_args);

  void (*properties_changed)(WpaInterface *object, GVariant *arg_properties);

  void (*scan_done)(WpaInterface *object, gboolean arg_success);

  void (*sta_authorized)(WpaInterface *object, const gchar *arg_name);

  void (*sta_deauthorized)(WpaInterface *object, const gchar *arg_name);
};

GType
wpa_interface__get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_interface__interface_info(void);
guint
wpa_interface__override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_interface__complete_scan(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_signal_poll(WpaInterface *object, GDBusMethodInvocation *invocation,
                                    GVariant *args);

void
wpa_interface__complete_disconnect(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_add_network(WpaInterface *object, GDBusMethodInvocation *invocation,
                                    const gchar *path);

void
wpa_interface__complete_reassociate(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_reattach(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_reconnect(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_remove_network(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_remove_all_networks(WpaInterface *object,
                                            GDBusMethodInvocation *invocation);

void
wpa_interface__complete_select_network(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_network_reply(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_add_blob(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_get_blob(WpaInterface *object, GDBusMethodInvocation *invocation,
                                 const gchar *data);

void
wpa_interface__complete_remove_blob(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_set_pkcs11_engine_and_module_path(WpaInterface *object,
                                                          GDBusMethodInvocation *invocation);

void
wpa_interface__complete_flush_bss(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_subscribe_probe_req(WpaInterface *object,
                                            GDBusMethodInvocation *invocation);

void
wpa_interface__complete_unsubscribe_probe_req(WpaInterface *object,
                                              GDBusMethodInvocation *invocation);

void
wpa_interface__complete_eaplogoff(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_eaplogon(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_vendor_elem_add(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_vendor_elem_get(WpaInterface *object, GDBusMethodInvocation *invocation,
                                        const gchar *ielems);

void
wpa_interface__complete_vendor_elem_rem(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_save_config(WpaInterface *object, GDBusMethodInvocation *invocation);

void
wpa_interface__complete_abort_scan(WpaInterface *object, GDBusMethodInvocation *invocation);

/* D-Bus signal emissions functions: */
void
wpa_interface__emit_scan_done(WpaInterface *object, gboolean arg_success);

void
wpa_interface__emit_bssadded(WpaInterface *object, const gchar *arg_path, GVariant *arg_properties);

void
wpa_interface__emit_bssremoved(WpaInterface *object, const gchar *arg_path);

void
wpa_interface__emit_blob_added(WpaInterface *object, const gchar *arg_name);

void
wpa_interface__emit_blob_removed(WpaInterface *object, const gchar *arg_name);

void
wpa_interface__emit_network_added(WpaInterface *object, const gchar *arg_path,
                                  GVariant *arg_properties);

void
wpa_interface__emit_network_removed(WpaInterface *object, const gchar *arg_path);

void
wpa_interface__emit_network_selected(WpaInterface *object, const gchar *arg_path);

void
wpa_interface__emit_properties_changed(WpaInterface *object, GVariant *arg_properties);

void
wpa_interface__emit_probe_request(WpaInterface *object, GVariant *arg_args);

void
wpa_interface__emit_certification(WpaInterface *object, GVariant *arg_certification);

void
wpa_interface__emit_eap(WpaInterface *object, const gchar *arg_status, const gchar *arg_parameter);

void
wpa_interface__emit_sta_authorized(WpaInterface *object, const gchar *arg_name);

void
wpa_interface__emit_sta_deauthorized(WpaInterface *object, const gchar *arg_name);

void
wpa_interface__emit_network_request(WpaInterface *object, const gchar *arg_path,
                                    const gchar *arg_field, const gchar *arg_text);

/* D-Bus method calls: */
void
wpa_interface__call_scan(WpaInterface *proxy, GVariant *arg_args, GCancellable *cancellable,
                         GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_scan_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_scan_sync(WpaInterface *proxy, GVariant *arg_args, GCancellable *cancellable,
                              GError **error);

void
wpa_interface__call_signal_poll(WpaInterface *proxy, GCancellable *cancellable,
                                GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_signal_poll_finish(WpaInterface *proxy, GVariant **out_args, GAsyncResult *res,
                                       GError **error);

gboolean
wpa_interface__call_signal_poll_sync(WpaInterface *proxy, GVariant **out_args,
                                     GCancellable *cancellable, GError **error);

void
wpa_interface__call_disconnect(WpaInterface *proxy, GCancellable *cancellable,
                               GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_disconnect_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_disconnect_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

void
wpa_interface__call_add_network(WpaInterface *proxy, GVariant *arg_args, GCancellable *cancellable,
                                GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_add_network_finish(WpaInterface *proxy, gchar **out_path, GAsyncResult *res,
                                       GError **error);

gboolean
wpa_interface__call_add_network_sync(WpaInterface *proxy, GVariant *arg_args, gchar **out_path,
                                     GCancellable *cancellable, GError **error);

void
wpa_interface__call_reassociate(WpaInterface *proxy, GCancellable *cancellable,
                                GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_reassociate_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_reassociate_sync(WpaInterface *proxy, GCancellable *cancellable,
                                     GError **error);

void
wpa_interface__call_reattach(WpaInterface *proxy, GCancellable *cancellable,
                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_reattach_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_reattach_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

void
wpa_interface__call_reconnect(WpaInterface *proxy, GCancellable *cancellable,
                              GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_reconnect_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_reconnect_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

void
wpa_interface__call_remove_network(WpaInterface *proxy, const gchar *arg_path,
                                   GCancellable *cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);

gboolean
wpa_interface__call_remove_network_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_remove_network_sync(WpaInterface *proxy, const gchar *arg_path,
                                        GCancellable *cancellable, GError **error);

void
wpa_interface__call_remove_all_networks(WpaInterface *proxy, GCancellable *cancellable,
                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_remove_all_networks_finish(WpaInterface *proxy, GAsyncResult *res,
                                               GError **error);

gboolean
wpa_interface__call_remove_all_networks_sync(WpaInterface *proxy, GCancellable *cancellable,
                                             GError **error);

void
wpa_interface__call_select_network(WpaInterface *proxy, const gchar *arg_path,
                                   GCancellable *cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);

gboolean
wpa_interface__call_select_network_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_select_network_sync(WpaInterface *proxy, const gchar *arg_path,
                                        GCancellable *cancellable, GError **error);

void
wpa_interface__call_network_reply(WpaInterface *proxy, const gchar *arg_path,
                                  const gchar *arg_field, const gchar *arg_value,
                                  GCancellable *cancellable, GAsyncReadyCallback callback,
                                  gpointer user_data);

gboolean
wpa_interface__call_network_reply_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_network_reply_sync(WpaInterface *proxy, const gchar *arg_path,
                                       const gchar *arg_field, const gchar *arg_value,
                                       GCancellable *cancellable, GError **error);

void
wpa_interface__call_add_blob(WpaInterface *proxy, const gchar *arg_name, const gchar *arg_data,
                             GCancellable *cancellable, GAsyncReadyCallback callback,
                             gpointer user_data);

gboolean
wpa_interface__call_add_blob_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_add_blob_sync(WpaInterface *proxy, const gchar *arg_name, const gchar *arg_data,
                                  GCancellable *cancellable, GError **error);

void
wpa_interface__call_get_blob(WpaInterface *proxy, const gchar *arg_name, GCancellable *cancellable,
                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_get_blob_finish(WpaInterface *proxy, gchar **out_data, GAsyncResult *res,
                                    GError **error);

gboolean
wpa_interface__call_get_blob_sync(WpaInterface *proxy, const gchar *arg_name, gchar **out_data,
                                  GCancellable *cancellable, GError **error);

void
wpa_interface__call_remove_blob(WpaInterface *proxy, const gchar *arg_name,
                                GCancellable *cancellable, GAsyncReadyCallback callback,
                                gpointer user_data);

gboolean
wpa_interface__call_remove_blob_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_remove_blob_sync(WpaInterface *proxy, const gchar *arg_name,
                                     GCancellable *cancellable, GError **error);

void
wpa_interface__call_set_pkcs11_engine_and_module_path(
  WpaInterface *proxy, const gchar *arg_pkcs11_engine_path, const gchar *arg_pkcs11_module_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_set_pkcs11_engine_and_module_path_finish(WpaInterface *proxy, GAsyncResult *res,
                                                             GError **error);

gboolean
wpa_interface__call_set_pkcs11_engine_and_module_path_sync(WpaInterface *proxy,
                                                           const gchar *arg_pkcs11_engine_path,
                                                           const gchar *arg_pkcs11_module_path,
                                                           GCancellable *cancellable,
                                                           GError **error);

void
wpa_interface__call_flush_bss(WpaInterface *proxy, guint arg_age, GCancellable *cancellable,
                              GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_flush_bss_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_flush_bss_sync(WpaInterface *proxy, guint arg_age, GCancellable *cancellable,
                                   GError **error);

void
wpa_interface__call_subscribe_probe_req(WpaInterface *proxy, GCancellable *cancellable,
                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_subscribe_probe_req_finish(WpaInterface *proxy, GAsyncResult *res,
                                               GError **error);

gboolean
wpa_interface__call_subscribe_probe_req_sync(WpaInterface *proxy, GCancellable *cancellable,
                                             GError **error);

void
wpa_interface__call_unsubscribe_probe_req(WpaInterface *proxy, GCancellable *cancellable,
                                          GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_unsubscribe_probe_req_finish(WpaInterface *proxy, GAsyncResult *res,
                                                 GError **error);

gboolean
wpa_interface__call_unsubscribe_probe_req_sync(WpaInterface *proxy, GCancellable *cancellable,
                                               GError **error);

void
wpa_interface__call_eaplogoff(WpaInterface *proxy, GCancellable *cancellable,
                              GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_eaplogoff_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_eaplogoff_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

void
wpa_interface__call_eaplogon(WpaInterface *proxy, GCancellable *cancellable,
                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_eaplogon_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_eaplogon_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

void
wpa_interface__call_vendor_elem_add(WpaInterface *proxy, gint arg_frame_id, const gchar *arg_ielems,
                                    GCancellable *cancellable, GAsyncReadyCallback callback,
                                    gpointer user_data);

gboolean
wpa_interface__call_vendor_elem_add_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_vendor_elem_add_sync(WpaInterface *proxy, gint arg_frame_id,
                                         const gchar *arg_ielems, GCancellable *cancellable,
                                         GError **error);

void
wpa_interface__call_vendor_elem_get(WpaInterface *proxy, gint arg_frame_id,
                                    GCancellable *cancellable, GAsyncReadyCallback callback,
                                    gpointer user_data);

gboolean
wpa_interface__call_vendor_elem_get_finish(WpaInterface *proxy, gchar **out_ielems,
                                           GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_vendor_elem_get_sync(WpaInterface *proxy, gint arg_frame_id, gchar **out_ielems,
                                         GCancellable *cancellable, GError **error);

void
wpa_interface__call_vendor_elem_rem(WpaInterface *proxy, gint arg_frame_id, const gchar *arg_ielems,
                                    GCancellable *cancellable, GAsyncReadyCallback callback,
                                    gpointer user_data);

gboolean
wpa_interface__call_vendor_elem_rem_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_vendor_elem_rem_sync(WpaInterface *proxy, gint arg_frame_id,
                                         const gchar *arg_ielems, GCancellable *cancellable,
                                         GError **error);

void
wpa_interface__call_save_config(WpaInterface *proxy, GCancellable *cancellable,
                                GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_save_config_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_save_config_sync(WpaInterface *proxy, GCancellable *cancellable,
                                     GError **error);

void
wpa_interface__call_abort_scan(WpaInterface *proxy, GCancellable *cancellable,
                               GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface__call_abort_scan_finish(WpaInterface *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface__call_abort_scan_sync(WpaInterface *proxy, GCancellable *cancellable, GError **error);

/* D-Bus property accessors: */
GVariant *
wpa_interface__get_capabilities(WpaInterface *object);
GVariant *
wpa_interface__dup_capabilities(WpaInterface *object);
void
wpa_interface__set_capabilities(WpaInterface *object, GVariant *value);

const gchar *
wpa_interface__get_state(WpaInterface *object);
gchar *
wpa_interface__dup_state(WpaInterface *object);
void
wpa_interface__set_state(WpaInterface *object, const gchar *value);

gboolean
wpa_interface__get_scanning(WpaInterface *object);
void
wpa_interface__set_scanning(WpaInterface *object, gboolean value);

guint
wpa_interface__get_ap_scan(WpaInterface *object);
void
wpa_interface__set_ap_scan(WpaInterface *object, guint value);

guint
wpa_interface__get_bssexpire_age(WpaInterface *object);
void
wpa_interface__set_bssexpire_age(WpaInterface *object, guint value);

guint
wpa_interface__get_bssexpire_count(WpaInterface *object);
void
wpa_interface__set_bssexpire_count(WpaInterface *object, guint value);

const gchar *
wpa_interface__get_country(WpaInterface *object);
gchar *
wpa_interface__dup_country(WpaInterface *object);
void
wpa_interface__set_country(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ifname(WpaInterface *object);
gchar *
wpa_interface__dup_ifname(WpaInterface *object);
void
wpa_interface__set_ifname(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_driver(WpaInterface *object);
gchar *
wpa_interface__dup_driver(WpaInterface *object);
void
wpa_interface__set_driver(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_bridge_ifname(WpaInterface *object);
gchar *
wpa_interface__dup_bridge_ifname(WpaInterface *object);
void
wpa_interface__set_bridge_ifname(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_config_file(WpaInterface *object);
gchar *
wpa_interface__dup_config_file(WpaInterface *object);
void
wpa_interface__set_config_file(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_current_bss(WpaInterface *object);
gchar *
wpa_interface__dup_current_bss(WpaInterface *object);
void
wpa_interface__set_current_bss(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_current_network(WpaInterface *object);
gchar *
wpa_interface__dup_current_network(WpaInterface *object);
void
wpa_interface__set_current_network(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_current_auth_mode(WpaInterface *object);
gchar *
wpa_interface__dup_current_auth_mode(WpaInterface *object);
void
wpa_interface__set_current_auth_mode(WpaInterface *object, const gchar *value);

GVariant *
wpa_interface__get_blobs(WpaInterface *object);
GVariant *
wpa_interface__dup_blobs(WpaInterface *object);
void
wpa_interface__set_blobs(WpaInterface *object, GVariant *value);

const gchar *const *
wpa_interface__get_bsss(WpaInterface *object);
gchar **
wpa_interface__dup_bsss(WpaInterface *object);
void
wpa_interface__set_bsss(WpaInterface *object, const gchar *const *value);

const gchar *const *
wpa_interface__get_networks(WpaInterface *object);
gchar **
wpa_interface__dup_networks(WpaInterface *object);
void
wpa_interface__set_networks(WpaInterface *object, const gchar *const *value);

gboolean
wpa_interface__get_fast_reauth(WpaInterface *object);
void
wpa_interface__set_fast_reauth(WpaInterface *object, gboolean value);

gint
wpa_interface__get_scan_interval(WpaInterface *object);
void
wpa_interface__set_scan_interval(WpaInterface *object, gint value);

const gchar *
wpa_interface__get_pkcs11_engine_path(WpaInterface *object);
gchar *
wpa_interface__dup_pkcs11_engine_path(WpaInterface *object);
void
wpa_interface__set_pkcs11_engine_path(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_pkcs11_module_path(WpaInterface *object);
gchar *
wpa_interface__dup_pkcs11_module_path(WpaInterface *object);
void
wpa_interface__set_pkcs11_module_path(WpaInterface *object, const gchar *value);

gint
wpa_interface__get_disconnect_reason(WpaInterface *object);
void
wpa_interface__set_disconnect_reason(WpaInterface *object, gint value);

gint
wpa_interface__get_assoc_status_code(WpaInterface *object);
void
wpa_interface__set_assoc_status_code(WpaInterface *object, gint value);

const gchar *
wpa_interface__get_ctrl_interface(WpaInterface *object);
gchar *
wpa_interface__dup_ctrl_interface(WpaInterface *object);
void
wpa_interface__set_ctrl_interface(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ctrl_interface_group(WpaInterface *object);
gchar *
wpa_interface__dup_ctrl_interface_group(WpaInterface *object);
void
wpa_interface__set_ctrl_interface_group(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_eapol_version(WpaInterface *object);
gchar *
wpa_interface__dup_eapol_version(WpaInterface *object);
void
wpa_interface__set_eapol_version(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_bgscan(WpaInterface *object);
gchar *
wpa_interface__dup_bgscan(WpaInterface *object);
void
wpa_interface__set_bgscan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_disable_scan_offload(WpaInterface *object);
gchar *
wpa_interface__dup_disable_scan_offload(WpaInterface *object);
void
wpa_interface__set_disable_scan_offload(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_opensc_engine_path(WpaInterface *object);
gchar *
wpa_interface__dup_opensc_engine_path(WpaInterface *object);
void
wpa_interface__set_opensc_engine_path(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_openssl_ciphers(WpaInterface *object);
gchar *
wpa_interface__dup_openssl_ciphers(WpaInterface *object);
void
wpa_interface__set_openssl_ciphers(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_pcsc_reader(WpaInterface *object);
gchar *
wpa_interface__dup_pcsc_reader(WpaInterface *object);
void
wpa_interface__set_pcsc_reader(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_pcsc_pin(WpaInterface *object);
gchar *
wpa_interface__dup_pcsc_pin(WpaInterface *object);
void
wpa_interface__set_pcsc_pin(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_external_sim(WpaInterface *object);
gchar *
wpa_interface__dup_external_sim(WpaInterface *object);
void
wpa_interface__set_external_sim(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_driver_param(WpaInterface *object);
gchar *
wpa_interface__dup_driver_param(WpaInterface *object);
void
wpa_interface__set_driver_param(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_dot11_rsnaconfig_pmklifetime(WpaInterface *object);
gchar *
wpa_interface__dup_dot11_rsnaconfig_pmklifetime(WpaInterface *object);
void
wpa_interface__set_dot11_rsnaconfig_pmklifetime(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_dot11_rsnaconfig_pmkreauth_threshold(WpaInterface *object);
gchar *
wpa_interface__dup_dot11_rsnaconfig_pmkreauth_threshold(WpaInterface *object);
void
wpa_interface__set_dot11_rsnaconfig_pmkreauth_threshold(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_dot11_rsnaconfig_satimeout(WpaInterface *object);
gchar *
wpa_interface__dup_dot11_rsnaconfig_satimeout(WpaInterface *object);
void
wpa_interface__set_dot11_rsnaconfig_satimeout(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_update_config(WpaInterface *object);
gchar *
wpa_interface__dup_update_config(WpaInterface *object);
void
wpa_interface__set_update_config(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_uuid(WpaInterface *object);
gchar *
wpa_interface__dup_uuid(WpaInterface *object);
void
wpa_interface__set_uuid(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_auto_uuid(WpaInterface *object);
gchar *
wpa_interface__dup_auto_uuid(WpaInterface *object);
void
wpa_interface__set_auto_uuid(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_device_name(WpaInterface *object);
gchar *
wpa_interface__dup_device_name(WpaInterface *object);
void
wpa_interface__set_device_name(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_manufacturer(WpaInterface *object);
gchar *
wpa_interface__dup_manufacturer(WpaInterface *object);
void
wpa_interface__set_manufacturer(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_model_name(WpaInterface *object);
gchar *
wpa_interface__dup_model_name(WpaInterface *object);
void
wpa_interface__set_model_name(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_model_number(WpaInterface *object);
gchar *
wpa_interface__dup_model_number(WpaInterface *object);
void
wpa_interface__set_model_number(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_serial_number(WpaInterface *object);
gchar *
wpa_interface__dup_serial_number(WpaInterface *object);
void
wpa_interface__set_serial_number(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_device_type(WpaInterface *object);
gchar *
wpa_interface__dup_device_type(WpaInterface *object);
void
wpa_interface__set_device_type(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_os_version(WpaInterface *object);
gchar *
wpa_interface__dup_os_version(WpaInterface *object);
void
wpa_interface__set_os_version(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_config_methods(WpaInterface *object);
gchar *
wpa_interface__dup_config_methods(WpaInterface *object);
void
wpa_interface__set_config_methods(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_cred_processing(WpaInterface *object);
gchar *
wpa_interface__dup_wps_cred_processing(WpaInterface *object);
void
wpa_interface__set_wps_cred_processing(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_vendor_ext_m1(WpaInterface *object);
gchar *
wpa_interface__dup_wps_vendor_ext_m1(WpaInterface *object);
void
wpa_interface__set_wps_vendor_ext_m1(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_sec_device_type(WpaInterface *object);
gchar *
wpa_interface__dup_sec_device_type(WpaInterface *object);
void
wpa_interface__set_sec_device_type(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_listen_reg_class(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_listen_reg_class(WpaInterface *object);
void
wpa_interface__set_p2p_listen_reg_class(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_listen_channel(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_listen_channel(WpaInterface *object);
void
wpa_interface__set_p2p_listen_channel(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_oper_reg_class(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_oper_reg_class(WpaInterface *object);
void
wpa_interface__set_p2p_oper_reg_class(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_oper_channel(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_oper_channel(WpaInterface *object);
void
wpa_interface__set_p2p_oper_channel(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_intent(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_intent(WpaInterface *object);
void
wpa_interface__set_p2p_go_intent(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_ssid_postfix(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_ssid_postfix(WpaInterface *object);
void
wpa_interface__set_p2p_ssid_postfix(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_persistent_reconnect(WpaInterface *object);
gchar *
wpa_interface__dup_persistent_reconnect(WpaInterface *object);
void
wpa_interface__set_persistent_reconnect(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_intra_bss(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_intra_bss(WpaInterface *object);
void
wpa_interface__set_p2p_intra_bss(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_group_idle(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_group_idle(WpaInterface *object);
void
wpa_interface__set_p2p_group_idle(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_freq_change_policy(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_freq_change_policy(WpaInterface *object);
void
wpa_interface__set_p2p_go_freq_change_policy(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_passphrase_len(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_passphrase_len(WpaInterface *object);
void
wpa_interface__set_p2p_passphrase_len(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_pref_chan(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_pref_chan(WpaInterface *object);
void
wpa_interface__set_p2p_pref_chan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_no_go_freq(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_no_go_freq(WpaInterface *object);
void
wpa_interface__set_p2p_no_go_freq(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_add_cli_chan(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_add_cli_chan(WpaInterface *object);
void
wpa_interface__set_p2p_add_cli_chan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_optimize_listen_chan(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_optimize_listen_chan(WpaInterface *object);
void
wpa_interface__set_p2p_optimize_listen_chan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_ht40(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_ht40(WpaInterface *object);
void
wpa_interface__set_p2p_go_ht40(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_vht(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_vht(WpaInterface *object);
void
wpa_interface__set_p2p_go_vht(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_disabled(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_disabled(WpaInterface *object);
void
wpa_interface__set_p2p_disabled(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_ctwindow(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_ctwindow(WpaInterface *object);
void
wpa_interface__set_p2p_go_ctwindow(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_no_group_iface(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_no_group_iface(WpaInterface *object);
void
wpa_interface__set_p2p_no_group_iface(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_ignore_shared_freq(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_ignore_shared_freq(WpaInterface *object);
void
wpa_interface__set_p2p_ignore_shared_freq(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ip_addr_go(WpaInterface *object);
gchar *
wpa_interface__dup_ip_addr_go(WpaInterface *object);
void
wpa_interface__set_ip_addr_go(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ip_addr_mask(WpaInterface *object);
gchar *
wpa_interface__dup_ip_addr_mask(WpaInterface *object);
void
wpa_interface__set_ip_addr_mask(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ip_addr_start(WpaInterface *object);
gchar *
wpa_interface__dup_ip_addr_start(WpaInterface *object);
void
wpa_interface__set_ip_addr_start(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ip_addr_end(WpaInterface *object);
gchar *
wpa_interface__dup_ip_addr_end(WpaInterface *object);
void
wpa_interface__set_ip_addr_end(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_cli_probe(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_cli_probe(WpaInterface *object);
void
wpa_interface__set_p2p_cli_probe(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_bss_max_count(WpaInterface *object);
gchar *
wpa_interface__dup_bss_max_count(WpaInterface *object);
void
wpa_interface__set_bss_max_count(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_filter_ssids(WpaInterface *object);
gchar *
wpa_interface__dup_filter_ssids(WpaInterface *object);
void
wpa_interface__set_filter_ssids(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_filter_rssi(WpaInterface *object);
gchar *
wpa_interface__dup_filter_rssi(WpaInterface *object);
void
wpa_interface__set_filter_rssi(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_max_num_sta(WpaInterface *object);
gchar *
wpa_interface__dup_max_num_sta(WpaInterface *object);
void
wpa_interface__set_max_num_sta(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_disassoc_low_ack(WpaInterface *object);
gchar *
wpa_interface__dup_disassoc_low_ack(WpaInterface *object);
void
wpa_interface__set_disassoc_low_ack(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_interworking(WpaInterface *object);
gchar *
wpa_interface__dup_interworking(WpaInterface *object);
void
wpa_interface__set_interworking(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_hessid(WpaInterface *object);
gchar *
wpa_interface__dup_hessid(WpaInterface *object);
void
wpa_interface__set_hessid(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_access_network_type(WpaInterface *object);
gchar *
wpa_interface__dup_access_network_type(WpaInterface *object);
void
wpa_interface__set_access_network_type(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_go_interworking(WpaInterface *object);
gchar *
wpa_interface__dup_go_interworking(WpaInterface *object);
void
wpa_interface__set_go_interworking(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_go_access_network_type(WpaInterface *object);
gchar *
wpa_interface__dup_go_access_network_type(WpaInterface *object);
void
wpa_interface__set_go_access_network_type(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_go_internet(WpaInterface *object);
gchar *
wpa_interface__dup_go_internet(WpaInterface *object);
void
wpa_interface__set_go_internet(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_go_venue_group(WpaInterface *object);
gchar *
wpa_interface__dup_go_venue_group(WpaInterface *object);
void
wpa_interface__set_go_venue_group(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_go_venue_type(WpaInterface *object);
gchar *
wpa_interface__dup_go_venue_type(WpaInterface *object);
void
wpa_interface__set_go_venue_type(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_pbc_in_m1(WpaInterface *object);
gchar *
wpa_interface__dup_pbc_in_m1(WpaInterface *object);
void
wpa_interface__set_pbc_in_m1(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_autoscan(WpaInterface *object);
gchar *
wpa_interface__dup_autoscan(WpaInterface *object);
void
wpa_interface__set_autoscan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_nfc_dev_pw_id(WpaInterface *object);
gchar *
wpa_interface__dup_wps_nfc_dev_pw_id(WpaInterface *object);
void
wpa_interface__set_wps_nfc_dev_pw_id(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_nfc_dh_pubkey(WpaInterface *object);
gchar *
wpa_interface__dup_wps_nfc_dh_pubkey(WpaInterface *object);
void
wpa_interface__set_wps_nfc_dh_pubkey(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_nfc_dh_privkey(WpaInterface *object);
gchar *
wpa_interface__dup_wps_nfc_dh_privkey(WpaInterface *object);
void
wpa_interface__set_wps_nfc_dh_privkey(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_nfc_dev_pw(WpaInterface *object);
gchar *
wpa_interface__dup_wps_nfc_dev_pw(WpaInterface *object);
void
wpa_interface__set_wps_nfc_dev_pw(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ext_password_backend(WpaInterface *object);
gchar *
wpa_interface__dup_ext_password_backend(WpaInterface *object);
void
wpa_interface__set_ext_password_backend(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_go_max_inactivity(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_go_max_inactivity(WpaInterface *object);
void
wpa_interface__set_p2p_go_max_inactivity(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_auto_interworking(WpaInterface *object);
gchar *
wpa_interface__dup_auto_interworking(WpaInterface *object);
void
wpa_interface__set_auto_interworking(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_okc(WpaInterface *object);
gchar *
wpa_interface__dup_okc(WpaInterface *object);
void
wpa_interface__set_okc(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_pmf(WpaInterface *object);
gchar *
wpa_interface__dup_pmf(WpaInterface *object);
void
wpa_interface__set_pmf(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_sae_groups(WpaInterface *object);
gchar *
wpa_interface__dup_sae_groups(WpaInterface *object);
void
wpa_interface__set_sae_groups(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_dtim_period(WpaInterface *object);
gchar *
wpa_interface__dup_dtim_period(WpaInterface *object);
void
wpa_interface__set_dtim_period(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_beacon_int(WpaInterface *object);
gchar *
wpa_interface__dup_beacon_int(WpaInterface *object);
void
wpa_interface__set_beacon_int(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ap_vendor_elements(WpaInterface *object);
gchar *
wpa_interface__dup_ap_vendor_elements(WpaInterface *object);
void
wpa_interface__set_ap_vendor_elements(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ignore_old_scan_res(WpaInterface *object);
gchar *
wpa_interface__dup_ignore_old_scan_res(WpaInterface *object);
void
wpa_interface__set_ignore_old_scan_res(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_freq_list(WpaInterface *object);
gchar *
wpa_interface__dup_freq_list(WpaInterface *object);
void
wpa_interface__set_freq_list(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_scan_cur_freq(WpaInterface *object);
gchar *
wpa_interface__dup_scan_cur_freq(WpaInterface *object);
void
wpa_interface__set_scan_cur_freq(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_sched_scan_interval(WpaInterface *object);
gchar *
wpa_interface__dup_sched_scan_interval(WpaInterface *object);
void
wpa_interface__set_sched_scan_interval(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_sched_scan_start_delay(WpaInterface *object);
gchar *
wpa_interface__dup_sched_scan_start_delay(WpaInterface *object);
void
wpa_interface__set_sched_scan_start_delay(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_tdls_external_control(WpaInterface *object);
gchar *
wpa_interface__dup_tdls_external_control(WpaInterface *object);
void
wpa_interface__set_tdls_external_control(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_osu_dir(WpaInterface *object);
gchar *
wpa_interface__dup_osu_dir(WpaInterface *object);
void
wpa_interface__set_osu_dir(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wowlan_triggers(WpaInterface *object);
gchar *
wpa_interface__dup_wowlan_triggers(WpaInterface *object);
void
wpa_interface__set_wowlan_triggers(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_p2p_search_delay(WpaInterface *object);
gchar *
wpa_interface__dup_p2p_search_delay(WpaInterface *object);
void
wpa_interface__set_p2p_search_delay(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_mac_addr(WpaInterface *object);
gchar *
wpa_interface__dup_mac_addr(WpaInterface *object);
void
wpa_interface__set_mac_addr(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_rand_addr_lifetime(WpaInterface *object);
gchar *
wpa_interface__dup_rand_addr_lifetime(WpaInterface *object);
void
wpa_interface__set_rand_addr_lifetime(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_preassoc_mac_addr(WpaInterface *object);
gchar *
wpa_interface__dup_preassoc_mac_addr(WpaInterface *object);
void
wpa_interface__set_preassoc_mac_addr(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_key_mgmt_offload(WpaInterface *object);
gchar *
wpa_interface__dup_key_mgmt_offload(WpaInterface *object);
void
wpa_interface__set_key_mgmt_offload(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_passive_scan(WpaInterface *object);
gchar *
wpa_interface__dup_passive_scan(WpaInterface *object);
void
wpa_interface__set_passive_scan(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_reassoc_same_bss_optim(WpaInterface *object);
gchar *
wpa_interface__dup_reassoc_same_bss_optim(WpaInterface *object);
void
wpa_interface__set_reassoc_same_bss_optim(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wps_priority(WpaInterface *object);
gchar *
wpa_interface__dup_wps_priority(WpaInterface *object);
void
wpa_interface__set_wps_priority(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_cert_in_cb(WpaInterface *object);
gchar *
wpa_interface__dup_cert_in_cb(WpaInterface *object);
void
wpa_interface__set_cert_in_cb(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_wpa_rsc_relaxation(WpaInterface *object);
gchar *
wpa_interface__dup_wpa_rsc_relaxation(WpaInterface *object);
void
wpa_interface__set_wpa_rsc_relaxation(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_sched_scan_plans(WpaInterface *object);
gchar *
wpa_interface__dup_sched_scan_plans(WpaInterface *object);
void
wpa_interface__set_sched_scan_plans(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_gas_address3(WpaInterface *object);
gchar *
wpa_interface__dup_gas_address3(WpaInterface *object);
void
wpa_interface__set_gas_address3(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ftm_responder(WpaInterface *object);
gchar *
wpa_interface__dup_ftm_responder(WpaInterface *object);
void
wpa_interface__set_ftm_responder(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_ftm_initiator(WpaInterface *object);
gchar *
wpa_interface__dup_ftm_initiator(WpaInterface *object);
void
wpa_interface__set_ftm_initiator(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_gas_rand_addr_lifetime(WpaInterface *object);
gchar *
wpa_interface__dup_gas_rand_addr_lifetime(WpaInterface *object);
void
wpa_interface__set_gas_rand_addr_lifetime(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_gas_rand_mac_addr(WpaInterface *object);
gchar *
wpa_interface__dup_gas_rand_mac_addr(WpaInterface *object);
void
wpa_interface__set_gas_rand_mac_addr(WpaInterface *object, const gchar *value);

const gchar *
wpa_interface__get_dpp_config_processing(WpaInterface *object);
gchar *
wpa_interface__dup_dpp_config_processing(WpaInterface *object);
void
wpa_interface__set_dpp_config_processing(WpaInterface *object, const gchar *value);

/* ---- */

#define WPA_INTERFACE_TYPE__PROXY (wpa_interface__proxy_get_type())
#define WPA_INTERFACE__PROXY(o)                                                                    \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE__PROXY, WpaInterfaceProxy))
#define WPA_INTERFACE__PROXY_CLASS(k)                                                              \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE__PROXY, WpaInterfaceProxyClass))
#define WPA_INTERFACE__PROXY_GET_CLASS(o)                                                          \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE__PROXY, WpaInterfaceProxyClass))
#define WPA_INTERFACE_IS__PROXY(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE__PROXY))
#define WPA_INTERFACE_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE__PROXY))

typedef struct _WpaInterfaceProxy WpaInterfaceProxy;
typedef struct _WpaInterfaceProxyClass WpaInterfaceProxyClass;
typedef struct _WpaInterfaceProxyPrivate WpaInterfaceProxyPrivate;

struct _WpaInterfaceProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaInterfaceProxyPrivate *priv;
};

struct _WpaInterfaceProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_interface__proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceProxy, g_object_unref)
#endif

void
wpa_interface__proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                         const gchar *object_path, GCancellable *cancellable,
                         GAsyncReadyCallback callback, gpointer user_data);
WpaInterface *
wpa_interface__proxy_new_finish(GAsyncResult *res, GError **error);
WpaInterface *
wpa_interface__proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                              const gchar *object_path, GCancellable *cancellable, GError **error);

void
wpa_interface__proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                 const gchar *object_path, GCancellable *cancellable,
                                 GAsyncReadyCallback callback, gpointer user_data);
WpaInterface *
wpa_interface__proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaInterface *
wpa_interface__proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                      const gchar *object_path, GCancellable *cancellable,
                                      GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE__SKELETON (wpa_interface__skeleton_get_type())
#define WPA_INTERFACE__SKELETON(o)                                                                 \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE__SKELETON, WpaInterfaceSkeleton))
#define WPA_INTERFACE__SKELETON_CLASS(k)                                                           \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE__SKELETON, WpaInterfaceSkeletonClass))
#define WPA_INTERFACE__SKELETON_GET_CLASS(o)                                                       \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE__SKELETON, WpaInterfaceSkeletonClass))
#define WPA_INTERFACE_IS__SKELETON(o)                                                              \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE__SKELETON))
#define WPA_INTERFACE_IS__SKELETON_CLASS(k)                                                        \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE__SKELETON))

typedef struct _WpaInterfaceSkeleton WpaInterfaceSkeleton;
typedef struct _WpaInterfaceSkeletonClass WpaInterfaceSkeletonClass;
typedef struct _WpaInterfaceSkeletonPrivate WpaInterfaceSkeletonPrivate;

struct _WpaInterfaceSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaInterfaceSkeletonPrivate *priv;
};

struct _WpaInterfaceSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_interface__skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceSkeleton, g_object_unref)
#endif

WpaInterface *
wpa_interface__skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.WPS */

#define WPA_INTERFACE_TYPE_WPS (wpa_interface_wps_get_type())
#define WPA_INTERFACE_WPS(o)                                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_WPS, WpaInterfaceWPS))
#define WPA_INTERFACE_IS_WPS(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_WPS))
#define WPA_INTERFACE_WPS_GET_IFACE(o)                                                             \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_INTERFACE_TYPE_WPS, WpaInterfaceWPSIface))

struct _WpaInterfaceWPS;
typedef struct _WpaInterfaceWPS WpaInterfaceWPS;
typedef struct _WpaInterfaceWPSIface WpaInterfaceWPSIface;

struct _WpaInterfaceWPSIface {
  GTypeInterface parent_iface;

  gboolean (*handle_cancel)(WpaInterfaceWPS *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_start)(WpaInterfaceWPS *object, GDBusMethodInvocation *invocation,
                           GVariant *arg_args);

  const gchar *(*get_config_methods)(WpaInterfaceWPS *object);

  const gchar *(*get_device_name)(WpaInterfaceWPS *object);

  const gchar *(*get_device_type)(WpaInterfaceWPS *object);

  const gchar *(*get_manufacturer)(WpaInterfaceWPS *object);

  const gchar *(*get_model_name)(WpaInterfaceWPS *object);

  const gchar *(*get_model_number)(WpaInterfaceWPS *object);

  gboolean (*get_process_credentials)(WpaInterfaceWPS *object);

  const gchar *(*get_serial_number)(WpaInterfaceWPS *object);

  void (*credentials)(WpaInterfaceWPS *object, GVariant *arg_credentials);

  void (*event)(WpaInterfaceWPS *object, const gchar *arg_name, GVariant *arg_args);

  void (*properties_changed)(WpaInterfaceWPS *object, GVariant *arg_properties);
};

GType
wpa_interface_wps_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_interface_wps_interface_info(void);
guint
wpa_interface_wps_override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_interface_wps_complete_start(WpaInterfaceWPS *object, GDBusMethodInvocation *invocation,
                                 GVariant *output);

void
wpa_interface_wps_complete_cancel(WpaInterfaceWPS *object, GDBusMethodInvocation *invocation);

/* D-Bus signal emissions functions: */
void
wpa_interface_wps_emit_event(WpaInterfaceWPS *object, const gchar *arg_name, GVariant *arg_args);

void
wpa_interface_wps_emit_credentials(WpaInterfaceWPS *object, GVariant *arg_credentials);

void
wpa_interface_wps_emit_properties_changed(WpaInterfaceWPS *object, GVariant *arg_properties);

/* D-Bus method calls: */
void
wpa_interface_wps_call_start(WpaInterfaceWPS *proxy, GVariant *arg_args, GCancellable *cancellable,
                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_wps_call_start_finish(WpaInterfaceWPS *proxy, GVariant **out_output,
                                    GAsyncResult *res, GError **error);

gboolean
wpa_interface_wps_call_start_sync(WpaInterfaceWPS *proxy, GVariant *arg_args, GVariant **out_output,
                                  GCancellable *cancellable, GError **error);

void
wpa_interface_wps_call_cancel(WpaInterfaceWPS *proxy, GCancellable *cancellable,
                              GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_wps_call_cancel_finish(WpaInterfaceWPS *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_interface_wps_call_cancel_sync(WpaInterfaceWPS *proxy, GCancellable *cancellable,
                                   GError **error);

/* D-Bus property accessors: */
gboolean
wpa_interface_wps_get_process_credentials(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_process_credentials(WpaInterfaceWPS *object, gboolean value);

const gchar *
wpa_interface_wps_get_config_methods(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_config_methods(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_config_methods(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_device_name(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_device_name(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_device_name(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_manufacturer(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_manufacturer(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_manufacturer(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_model_name(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_model_name(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_model_name(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_model_number(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_model_number(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_model_number(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_serial_number(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_serial_number(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_serial_number(WpaInterfaceWPS *object, const gchar *value);

const gchar *
wpa_interface_wps_get_device_type(WpaInterfaceWPS *object);
gchar *
wpa_interface_wps_dup_device_type(WpaInterfaceWPS *object);
void
wpa_interface_wps_set_device_type(WpaInterfaceWPS *object, const gchar *value);

/* ---- */

#define WPA_INTERFACE_TYPE_WPS_PROXY (wpa_interface_wps_proxy_get_type())
#define WPA_INTERFACE_WPS_PROXY(o)                                                                 \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_WPS_PROXY, WpaInterfaceWPSProxy))
#define WPA_INTERFACE_WPS_PROXY_CLASS(k)                                                           \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_WPS_PROXY, WpaInterfaceWPSProxyClass))
#define WPA_INTERFACE_WPS_PROXY_GET_CLASS(o)                                                       \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_WPS_PROXY, WpaInterfaceWPSProxyClass))
#define WPA_INTERFACE_IS_WPS_PROXY(o)                                                              \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_WPS_PROXY))
#define WPA_INTERFACE_IS_WPS_PROXY_CLASS(k)                                                        \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_WPS_PROXY))

typedef struct _WpaInterfaceWPSProxy WpaInterfaceWPSProxy;
typedef struct _WpaInterfaceWPSProxyClass WpaInterfaceWPSProxyClass;
typedef struct _WpaInterfaceWPSProxyPrivate WpaInterfaceWPSProxyPrivate;

struct _WpaInterfaceWPSProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaInterfaceWPSProxyPrivate *priv;
};

struct _WpaInterfaceWPSProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_interface_wps_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceWPSProxy, g_object_unref)
#endif

void
wpa_interface_wps_proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                            const gchar *object_path, GCancellable *cancellable,
                            GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceWPS *
wpa_interface_wps_proxy_new_finish(GAsyncResult *res, GError **error);
WpaInterfaceWPS *
wpa_interface_wps_proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags,
                                 const gchar *name, const gchar *object_path,
                                 GCancellable *cancellable, GError **error);

void
wpa_interface_wps_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                    const gchar *object_path, GCancellable *cancellable,
                                    GAsyncReadyCallback callback, gpointer user_data);
WpaInterfaceWPS *
wpa_interface_wps_proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaInterfaceWPS *
wpa_interface_wps_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags,
                                         const gchar *name, const gchar *object_path,
                                         GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_WPS_SKELETON (wpa_interface_wps_skeleton_get_type())
#define WPA_INTERFACE_WPS_SKELETON(o)                                                              \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_WPS_SKELETON, WpaInterfaceWPSSkeleton))
#define WPA_INTERFACE_WPS_SKELETON_CLASS(k)                                                        \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_WPS_SKELETON, WpaInterfaceWPSSkeletonClass))
#define WPA_INTERFACE_WPS_SKELETON_GET_CLASS(o)                                                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_WPS_SKELETON, WpaInterfaceWPSSkeletonClass))
#define WPA_INTERFACE_IS_WPS_SKELETON(o)                                                           \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_WPS_SKELETON))
#define WPA_INTERFACE_IS_WPS_SKELETON_CLASS(k)                                                     \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_WPS_SKELETON))

typedef struct _WpaInterfaceWPSSkeleton WpaInterfaceWPSSkeleton;
typedef struct _WpaInterfaceWPSSkeletonClass WpaInterfaceWPSSkeletonClass;
typedef struct _WpaInterfaceWPSSkeletonPrivate WpaInterfaceWPSSkeletonPrivate;

struct _WpaInterfaceWPSSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaInterfaceWPSSkeletonPrivate *priv;
};

struct _WpaInterfaceWPSSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_interface_wps_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceWPSSkeleton, g_object_unref)
#endif

WpaInterfaceWPS *
wpa_interface_wps_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Interface.P2PDevice */

#define WPA_INTERFACE_TYPE_P2_PDEVICE (wpa_interface_p2_pdevice_get_type())
#define WPA_INTERFACE_P2_PDEVICE(o)                                                                \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_P2_PDEVICE, WpaInterfaceP2PDevice))
#define WPA_INTERFACE_IS_P2_PDEVICE(o)                                                             \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_P2_PDEVICE))
#define WPA_INTERFACE_P2_PDEVICE_GET_IFACE(o)                                                      \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_INTERFACE_TYPE_P2_PDEVICE, WpaInterfaceP2PDeviceIface))

struct _WpaInterfaceP2PDevice;
typedef struct _WpaInterfaceP2PDevice WpaInterfaceP2PDevice;
typedef struct _WpaInterfaceP2PDeviceIface WpaInterfaceP2PDeviceIface;

struct _WpaInterfaceP2PDeviceIface {
  GTypeInterface parent_iface;

  gboolean (*handle_add_persistent_group)(WpaInterfaceP2PDevice *object,
                                          GDBusMethodInvocation *invocation, GVariant *arg_args);

  gboolean (*handle_add_service)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                                 GVariant *arg_args);

  gboolean (*handle_cancel)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_connect)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                             GVariant *arg_args);

  gboolean (*handle_delete_service)(WpaInterfaceP2PDevice *object,
                                    GDBusMethodInvocation *invocation, GVariant *arg_args);

  gboolean (*handle_disconnect)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_extended_listen)(WpaInterfaceP2PDevice *object,
                                     GDBusMethodInvocation *invocation, GVariant *arg_args);

  gboolean (*handle_find)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                          GVariant *arg_args);

  gboolean (*handle_flush)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_flush_service)(WpaInterfaceP2PDevice *object,
                                   GDBusMethodInvocation *invocation);

  gboolean (*handle_group_add)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                               GVariant *arg_args);

  gboolean (*handle_invite)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                            GVariant *arg_args);

  gboolean (*handle_listen)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                            gint arg_timeout);

  gboolean (*handle_presence_request)(WpaInterfaceP2PDevice *object,
                                      GDBusMethodInvocation *invocation, GVariant *arg_args);

  gboolean (*handle_provision_discovery_request)(WpaInterfaceP2PDevice *object,
                                                 GDBusMethodInvocation *invocation,
                                                 const gchar *arg_peer,
                                                 const gchar *arg_config_method);

  gboolean (*handle_reject_peer)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                                 const gchar *arg_peer);

  gboolean (*handle_remove_all_persistent_groups)(WpaInterfaceP2PDevice *object,
                                                  GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_client)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation,
                                   GVariant *arg_args);

  gboolean (*handle_remove_persistent_group)(WpaInterfaceP2PDevice *object,
                                             GDBusMethodInvocation *invocation,
                                             const gchar *arg_path);

  gboolean (*handle_service_discovery_cancel_request)(WpaInterfaceP2PDevice *object,
                                                      GDBusMethodInvocation *invocation,
                                                      guint64 arg_args);

  gboolean (*handle_service_discovery_external)(WpaInterfaceP2PDevice *object,
                                                GDBusMethodInvocation *invocation, gint arg_arg);

  gboolean (*handle_service_discovery_request)(WpaInterfaceP2PDevice *object,
                                               GDBusMethodInvocation *invocation,
                                               GVariant *arg_args);

  gboolean (*handle_service_discovery_response)(WpaInterfaceP2PDevice *object,
                                                GDBusMethodInvocation *invocation,
                                                GVariant *arg_args);

  gboolean (*handle_service_update)(WpaInterfaceP2PDevice *object,
                                    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_find)(WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation);

  const gchar *(*get_group)(WpaInterfaceP2PDevice *object);

  GVariant *(*get_p2_pdevice_config)(WpaInterfaceP2PDevice *object);

  const gchar *(*get_peer_go)(WpaInterfaceP2PDevice *object);

  const gchar *const *(*get_peers)(WpaInterfaceP2PDevice *object);

  const gchar *const *(*get_persistent_groups)(WpaInterfaceP2PDevice *object);

  const gchar *(*get_role)(WpaInterfaceP2PDevice *object);

  void (*device_found)(WpaInterfaceP2PDevice *object, const gchar *arg_path);

  void (*device_found_properties)(WpaInterfaceP2PDevice *object, const gchar *arg_path,
                                  GVariant *arg_properties);

  void (*device_lost)(WpaInterfaceP2PDevice *object, const gchar *arg_path);

  void (*find_stopped)(WpaInterfaceP2PDevice *object);

  void (*gonegotiation_failure)(WpaInterfaceP2PDevice *object, GVariant *arg_properties);

  void (*gonegotiation_request)(WpaInterfaceP2PDevice *object, const gchar *arg_path,
                                guint16 arg_dev_passwd_id, guchar arg_device_go_intent);

  void (*gonegotiation_success)(WpaInterfaceP2PDevice *object, GVariant *arg_properties);

  void (*group_finished)(WpaInterfaceP2PDevice *object, GVariant *arg_properties);

  void (*group_formation_failure)(WpaInterfaceP2PDevice *object, const gchar *arg_reason);

  void (*group_started)(WpaInterfaceP2PDevice *object, GVariant *arg_properties);

  void (*invitation_received)(WpaInterfaceP2PDevice *object, GVariant *arg_properties);

  void (*invitation_result)(WpaInterfaceP2PDevice *object, GVariant *arg_invite_result);

  void (*persistent_group_added)(WpaInterfaceP2PDevice *object, const gchar *arg_path,
                                 GVariant *arg_properties);

  void (*persistent_group_removed)(WpaInterfaceP2PDevice *object, const gchar *arg_path);

  void (*provision_discovery_failure)(WpaInterfaceP2PDevice *object, const gchar *arg_peer_object,
                                      gint arg_status);

  void (*provision_discovery_pbcrequest)(WpaInterfaceP2PDevice *object,
                                         const gchar *arg_peer_object);

  void (*provision_discovery_pbcresponse)(WpaInterfaceP2PDevice *object,
                                          const gchar *arg_peer_object);

  void (*provision_discovery_request_display_pin)(WpaInterfaceP2PDevice *object,
                                                  const gchar *arg_peer_object,
                                                  const gchar *arg_pin);

  void (*provision_discovery_request_enter_pin)(WpaInterfaceP2PDevice *object,
                                                const gchar *arg_peer_object);

  void (*provision_discovery_response_display_pin)(WpaInterfaceP2PDevice *object,
                                                   const gchar *arg_peer_object,
                                                   const gchar *arg_pin);

  void (*provision_discovery_response_enter_pin)(WpaInterfaceP2PDevice *object,
                                                 const gchar *arg_peer_object);

  void (*service_discovery_request)(WpaInterfaceP2PDevice *object, GVariant *arg_sd_request);

  void (*service_discovery_response)(WpaInterfaceP2PDevice *object, GVariant *arg_sd_response);

  void (*wps_failed)(WpaInterfaceP2PDevice *object, const gchar *arg_name, GVariant *arg_args);
};

GType
wpa_interface_p2_pdevice_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_interface_p2_pdevice_interface_info(void);
guint
wpa_interface_p2_pdevice_override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_interface_p2_pdevice_complete_find(WpaInterfaceP2PDevice *object,
                                       GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_stop_find(WpaInterfaceP2PDevice *object,
                                            GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_listen(WpaInterfaceP2PDevice *object,
                                         GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_extended_listen(WpaInterfaceP2PDevice *object,
                                                  GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_presence_request(WpaInterfaceP2PDevice *object,
                                                   GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_provision_discovery_request(WpaInterfaceP2PDevice *object,
                                                              GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_connect(WpaInterfaceP2PDevice *object,
                                          GDBusMethodInvocation *invocation,
                                          const gchar *generated_pin);

void
wpa_interface_p2_pdevice_complete_group_add(WpaInterfaceP2PDevice *object,
                                            GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_cancel(WpaInterfaceP2PDevice *object,
                                         GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_invite(WpaInterfaceP2PDevice *object,
                                         GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_disconnect(WpaInterfaceP2PDevice *object,
                                             GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_reject_peer(WpaInterfaceP2PDevice *object,
                                              GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_remove_client(WpaInterfaceP2PDevice *object,
                                                GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_flush(WpaInterfaceP2PDevice *object,
                                        GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_add_service(WpaInterfaceP2PDevice *object,
                                              GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_delete_service(WpaInterfaceP2PDevice *object,
                                                 GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_flush_service(WpaInterfaceP2PDevice *object,
                                                GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_service_discovery_request(WpaInterfaceP2PDevice *object,
                                                            GDBusMethodInvocation *invocation,
                                                            guint64 ref);

void
wpa_interface_p2_pdevice_complete_service_discovery_response(WpaInterfaceP2PDevice *object,
                                                             GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_service_discovery_cancel_request(
  WpaInterfaceP2PDevice *object, GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_service_update(WpaInterfaceP2PDevice *object,
                                                 GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_service_discovery_external(WpaInterfaceP2PDevice *object,
                                                             GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_add_persistent_group(WpaInterfaceP2PDevice *object,
                                                       GDBusMethodInvocation *invocation,
                                                       const gchar *path);

void
wpa_interface_p2_pdevice_complete_remove_persistent_group(WpaInterfaceP2PDevice *object,
                                                          GDBusMethodInvocation *invocation);

void
wpa_interface_p2_pdevice_complete_remove_all_persistent_groups(WpaInterfaceP2PDevice *object,
                                                               GDBusMethodInvocation *invocation);

/* D-Bus signal emissions functions: */
void
wpa_interface_p2_pdevice_emit_device_found(WpaInterfaceP2PDevice *object, const gchar *arg_path);

void
wpa_interface_p2_pdevice_emit_device_found_properties(WpaInterfaceP2PDevice *object,
                                                      const gchar *arg_path,
                                                      GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_device_lost(WpaInterfaceP2PDevice *object, const gchar *arg_path);

void
wpa_interface_p2_pdevice_emit_find_stopped(WpaInterfaceP2PDevice *object);

void
wpa_interface_p2_pdevice_emit_provision_discovery_request_display_pin(WpaInterfaceP2PDevice *object,
                                                                      const gchar *arg_peer_object,
                                                                      const gchar *arg_pin);

void
wpa_interface_p2_pdevice_emit_provision_discovery_response_display_pin(
  WpaInterfaceP2PDevice *object, const gchar *arg_peer_object, const gchar *arg_pin);

void
wpa_interface_p2_pdevice_emit_provision_discovery_request_enter_pin(WpaInterfaceP2PDevice *object,
                                                                    const gchar *arg_peer_object);

void
wpa_interface_p2_pdevice_emit_provision_discovery_response_enter_pin(WpaInterfaceP2PDevice *object,
                                                                     const gchar *arg_peer_object);

void
wpa_interface_p2_pdevice_emit_provision_discovery_pbcrequest(WpaInterfaceP2PDevice *object,
                                                             const gchar *arg_peer_object);

void
wpa_interface_p2_pdevice_emit_provision_discovery_pbcresponse(WpaInterfaceP2PDevice *object,
                                                              const gchar *arg_peer_object);

void
wpa_interface_p2_pdevice_emit_provision_discovery_failure(WpaInterfaceP2PDevice *object,
                                                          const gchar *arg_peer_object,
                                                          gint arg_status);

void
wpa_interface_p2_pdevice_emit_group_started(WpaInterfaceP2PDevice *object,
                                            GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_group_formation_failure(WpaInterfaceP2PDevice *object,
                                                      const gchar *arg_reason);

void
wpa_interface_p2_pdevice_emit_gonegotiation_success(WpaInterfaceP2PDevice *object,
                                                    GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_gonegotiation_failure(WpaInterfaceP2PDevice *object,
                                                    GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_gonegotiation_request(WpaInterfaceP2PDevice *object,
                                                    const gchar *arg_path,
                                                    guint16 arg_dev_passwd_id,
                                                    guchar arg_device_go_intent);

void
wpa_interface_p2_pdevice_emit_invitation_result(WpaInterfaceP2PDevice *object,
                                                GVariant *arg_invite_result);

void
wpa_interface_p2_pdevice_emit_group_finished(WpaInterfaceP2PDevice *object,
                                             GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_service_discovery_request(WpaInterfaceP2PDevice *object,
                                                        GVariant *arg_sd_request);

void
wpa_interface_p2_pdevice_emit_service_discovery_response(WpaInterfaceP2PDevice *object,
                                                         GVariant *arg_sd_response);

void
wpa_interface_p2_pdevice_emit_persistent_group_added(WpaInterfaceP2PDevice *object,
                                                     const gchar *arg_path,
                                                     GVariant *arg_properties);

void
wpa_interface_p2_pdevice_emit_persistent_group_removed(WpaInterfaceP2PDevice *object,
                                                       const gchar *arg_path);

void
wpa_interface_p2_pdevice_emit_wps_failed(WpaInterfaceP2PDevice *object, const gchar *arg_name,
                                         GVariant *arg_args);

void
wpa_interface_p2_pdevice_emit_invitation_received(WpaInterfaceP2PDevice *object,
                                                  GVariant *arg_properties);

/* D-Bus method calls: */
void
wpa_interface_p2_pdevice_call_find(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                   GCancellable *cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_find_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                          GError **error);

gboolean
wpa_interface_p2_pdevice_call_find_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                        GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_stop_find(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                        GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_stop_find_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                               GError **error);

gboolean
wpa_interface_p2_pdevice_call_stop_find_sync(WpaInterfaceP2PDevice *proxy,
                                             GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_listen(WpaInterfaceP2PDevice *proxy, gint arg_timeout,
                                     GCancellable *cancellable, GAsyncReadyCallback callback,
                                     gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_listen_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                            GError **error);

gboolean
wpa_interface_p2_pdevice_call_listen_sync(WpaInterfaceP2PDevice *proxy, gint arg_timeout,
                                          GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_extended_listen(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_extended_listen_finish(WpaInterfaceP2PDevice *proxy,
                                                     GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_extended_listen_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                                   GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_presence_request(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_presence_request_finish(WpaInterfaceP2PDevice *proxy,
                                                      GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_presence_request_sync(WpaInterfaceP2PDevice *proxy,
                                                    GVariant *arg_args, GCancellable *cancellable,
                                                    GError **error);

void
wpa_interface_p2_pdevice_call_provision_discovery_request(
  WpaInterfaceP2PDevice *proxy, const gchar *arg_peer, const gchar *arg_config_method,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_provision_discovery_request_finish(WpaInterfaceP2PDevice *proxy,
                                                                 GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_provision_discovery_request_sync(WpaInterfaceP2PDevice *proxy,
                                                               const gchar *arg_peer,
                                                               const gchar *arg_config_method,
                                                               GCancellable *cancellable,
                                                               GError **error);

void
wpa_interface_p2_pdevice_call_connect(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                      GCancellable *cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_connect_finish(WpaInterfaceP2PDevice *proxy,
                                             gchar **out_generated_pin, GAsyncResult *res,
                                             GError **error);

gboolean
wpa_interface_p2_pdevice_call_connect_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                           gchar **out_generated_pin, GCancellable *cancellable,
                                           GError **error);

void
wpa_interface_p2_pdevice_call_group_add(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                        GCancellable *cancellable, GAsyncReadyCallback callback,
                                        gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_group_add_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                               GError **error);

gboolean
wpa_interface_p2_pdevice_call_group_add_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                             GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_cancel(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                     GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_cancel_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                            GError **error);

gboolean
wpa_interface_p2_pdevice_call_cancel_sync(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                          GError **error);

void
wpa_interface_p2_pdevice_call_invite(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                     GCancellable *cancellable, GAsyncReadyCallback callback,
                                     gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_invite_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                            GError **error);

gboolean
wpa_interface_p2_pdevice_call_invite_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                          GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_disconnect(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                         GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_disconnect_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                GError **error);

gboolean
wpa_interface_p2_pdevice_call_disconnect_sync(WpaInterfaceP2PDevice *proxy,
                                              GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_reject_peer(WpaInterfaceP2PDevice *proxy, const gchar *arg_peer,
                                          GCancellable *cancellable, GAsyncReadyCallback callback,
                                          gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_reject_peer_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                 GError **error);

gboolean
wpa_interface_p2_pdevice_call_reject_peer_sync(WpaInterfaceP2PDevice *proxy, const gchar *arg_peer,
                                               GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_remove_client(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                            GCancellable *cancellable, GAsyncReadyCallback callback,
                                            gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_remove_client_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                   GError **error);

gboolean
wpa_interface_p2_pdevice_call_remove_client_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                                 GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_flush(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                    GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_flush_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                           GError **error);

gboolean
wpa_interface_p2_pdevice_call_flush_sync(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                         GError **error);

void
wpa_interface_p2_pdevice_call_add_service(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                          GCancellable *cancellable, GAsyncReadyCallback callback,
                                          gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_add_service_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                 GError **error);

gboolean
wpa_interface_p2_pdevice_call_add_service_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                               GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_delete_service(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_delete_service_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                    GError **error);

gboolean
wpa_interface_p2_pdevice_call_delete_service_sync(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                                  GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_flush_service(WpaInterfaceP2PDevice *proxy, GCancellable *cancellable,
                                            GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_flush_service_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                   GError **error);

gboolean
wpa_interface_p2_pdevice_call_flush_service_sync(WpaInterfaceP2PDevice *proxy,
                                                 GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_service_discovery_request(WpaInterfaceP2PDevice *proxy,
                                                        GVariant *arg_args,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_request_finish(WpaInterfaceP2PDevice *proxy,
                                                               guint64 *out_ref, GAsyncResult *res,
                                                               GError **error);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_request_sync(WpaInterfaceP2PDevice *proxy,
                                                             GVariant *arg_args, guint64 *out_ref,
                                                             GCancellable *cancellable,
                                                             GError **error);

void
wpa_interface_p2_pdevice_call_service_discovery_response(WpaInterfaceP2PDevice *proxy,
                                                         GVariant *arg_args,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_response_finish(WpaInterfaceP2PDevice *proxy,
                                                                GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_response_sync(WpaInterfaceP2PDevice *proxy,
                                                              GVariant *arg_args,
                                                              GCancellable *cancellable,
                                                              GError **error);

void
wpa_interface_p2_pdevice_call_service_discovery_cancel_request(WpaInterfaceP2PDevice *proxy,
                                                               guint64 arg_args,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_cancel_request_finish(WpaInterfaceP2PDevice *proxy,
                                                                      GAsyncResult *res,
                                                                      GError **error);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_cancel_request_sync(WpaInterfaceP2PDevice *proxy,
                                                                    guint64 arg_args,
                                                                    GCancellable *cancellable,
                                                                    GError **error);

void
wpa_interface_p2_pdevice_call_service_update(WpaInterfaceP2PDevice *proxy,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_service_update_finish(WpaInterfaceP2PDevice *proxy, GAsyncResult *res,
                                                    GError **error);

gboolean
wpa_interface_p2_pdevice_call_service_update_sync(WpaInterfaceP2PDevice *proxy,
                                                  GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_service_discovery_external(WpaInterfaceP2PDevice *proxy, gint arg_arg,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_external_finish(WpaInterfaceP2PDevice *proxy,
                                                                GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_service_discovery_external_sync(WpaInterfaceP2PDevice *proxy,
                                                              gint arg_arg,
                                                              GCancellable *cancellable,
                                                              GError **error);

void
wpa_interface_p2_pdevice_call_add_persistent_group(WpaInterfaceP2PDevice *proxy, GVariant *arg_args,
                                                   GCancellable *cancellable,
                                                   GAsyncReadyCallback callback,
                                                   gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_add_persistent_group_finish(WpaInterfaceP2PDevice *proxy,
                                                          gchar **out_path, GAsyncResult *res,
                                                          GError **error);

gboolean
wpa_interface_p2_pdevice_call_add_persistent_group_sync(WpaInterfaceP2PDevice *proxy,
                                                        GVariant *arg_args, gchar **out_path,
                                                        GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_call_remove_persistent_group(WpaInterfaceP2PDevice *proxy,
                                                      const gchar *arg_path,
                                                      GCancellable *cancellable,
                                                      GAsyncReadyCallback callback,
                                                      gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_remove_persistent_group_finish(WpaInterfaceP2PDevice *proxy,
                                                             GAsyncResult *res, GError **error);

gboolean
wpa_interface_p2_pdevice_call_remove_persistent_group_sync(WpaInterfaceP2PDevice *proxy,
                                                           const gchar *arg_path,
                                                           GCancellable *cancellable,
                                                           GError **error);

void
wpa_interface_p2_pdevice_call_remove_all_persistent_groups(WpaInterfaceP2PDevice *proxy,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

gboolean
wpa_interface_p2_pdevice_call_remove_all_persistent_groups_finish(WpaInterfaceP2PDevice *proxy,
                                                                  GAsyncResult *res,
                                                                  GError **error);

gboolean
wpa_interface_p2_pdevice_call_remove_all_persistent_groups_sync(WpaInterfaceP2PDevice *proxy,
                                                                GCancellable *cancellable,
                                                                GError **error);

/* D-Bus property accessors: */
GVariant *
wpa_interface_p2_pdevice_get_p2_pdevice_config(WpaInterfaceP2PDevice *object);
GVariant *
wpa_interface_p2_pdevice_dup_p2_pdevice_config(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_p2_pdevice_config(WpaInterfaceP2PDevice *object, GVariant *value);

const gchar *const *
wpa_interface_p2_pdevice_get_peers(WpaInterfaceP2PDevice *object);
gchar **
wpa_interface_p2_pdevice_dup_peers(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_peers(WpaInterfaceP2PDevice *object, const gchar *const *value);

const gchar *
wpa_interface_p2_pdevice_get_role(WpaInterfaceP2PDevice *object);
gchar *
wpa_interface_p2_pdevice_dup_role(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_role(WpaInterfaceP2PDevice *object, const gchar *value);

const gchar *
wpa_interface_p2_pdevice_get_group(WpaInterfaceP2PDevice *object);
gchar *
wpa_interface_p2_pdevice_dup_group(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_group(WpaInterfaceP2PDevice *object, const gchar *value);

const gchar *
wpa_interface_p2_pdevice_get_peer_go(WpaInterfaceP2PDevice *object);
gchar *
wpa_interface_p2_pdevice_dup_peer_go(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_peer_go(WpaInterfaceP2PDevice *object, const gchar *value);

const gchar *const *
wpa_interface_p2_pdevice_get_persistent_groups(WpaInterfaceP2PDevice *object);
gchar **
wpa_interface_p2_pdevice_dup_persistent_groups(WpaInterfaceP2PDevice *object);
void
wpa_interface_p2_pdevice_set_persistent_groups(WpaInterfaceP2PDevice *object,
                                               const gchar *const *value);

/* ---- */

#define WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY (wpa_interface_p2_pdevice_proxy_get_type())
#define WPA_INTERFACE_P2_PDEVICE_PROXY(o)                                                          \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY, WpaInterfaceP2PDeviceProxy))
#define WPA_INTERFACE_P2_PDEVICE_PROXY_CLASS(k)                                                    \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY,                               \
                           WpaInterfaceP2PDeviceProxyClass))
#define WPA_INTERFACE_P2_PDEVICE_PROXY_GET_CLASS(o)                                                \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY,                             \
                             WpaInterfaceP2PDeviceProxyClass))
#define WPA_INTERFACE_IS_P2_PDEVICE_PROXY(o)                                                       \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY))
#define WPA_INTERFACE_IS_P2_PDEVICE_PROXY_CLASS(k)                                                 \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_P2_PDEVICE_PROXY))

typedef struct _WpaInterfaceP2PDeviceProxy WpaInterfaceP2PDeviceProxy;
typedef struct _WpaInterfaceP2PDeviceProxyClass WpaInterfaceP2PDeviceProxyClass;
typedef struct _WpaInterfaceP2PDeviceProxyPrivate WpaInterfaceP2PDeviceProxyPrivate;

struct _WpaInterfaceP2PDeviceProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaInterfaceP2PDeviceProxyPrivate *priv;
};

struct _WpaInterfaceP2PDeviceProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_interface_p2_pdevice_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceP2PDeviceProxy, g_object_unref)
#endif

void
wpa_interface_p2_pdevice_proxy_new(GDBusConnection *connection, GDBusProxyFlags flags,
                                   const gchar *name, const gchar *object_path,
                                   GCancellable *cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);
WpaInterfaceP2PDevice *
wpa_interface_p2_pdevice_proxy_new_finish(GAsyncResult *res, GError **error);
WpaInterfaceP2PDevice *
wpa_interface_p2_pdevice_proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags,
                                        const gchar *name, const gchar *object_path,
                                        GCancellable *cancellable, GError **error);

void
wpa_interface_p2_pdevice_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags,
                                           const gchar *name, const gchar *object_path,
                                           GCancellable *cancellable, GAsyncReadyCallback callback,
                                           gpointer user_data);
WpaInterfaceP2PDevice *
wpa_interface_p2_pdevice_proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaInterfaceP2PDevice *
wpa_interface_p2_pdevice_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags,
                                                const gchar *name, const gchar *object_path,
                                                GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON (wpa_interface_p2_pdevice_skeleton_get_type())
#define WPA_INTERFACE_P2_PDEVICE_SKELETON(o)                                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON,                         \
                              WpaInterfaceP2PDeviceSkeleton))
#define WPA_INTERFACE_P2_PDEVICE_SKELETON_CLASS(k)                                                 \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON,                            \
                           WpaInterfaceP2PDeviceSkeletonClass))
#define WPA_INTERFACE_P2_PDEVICE_SKELETON_GET_CLASS(o)                                             \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON,                          \
                             WpaInterfaceP2PDeviceSkeletonClass))
#define WPA_INTERFACE_IS_P2_PDEVICE_SKELETON(o)                                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON))
#define WPA_INTERFACE_IS_P2_PDEVICE_SKELETON_CLASS(k)                                              \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_INTERFACE_TYPE_P2_PDEVICE_SKELETON))

typedef struct _WpaInterfaceP2PDeviceSkeleton WpaInterfaceP2PDeviceSkeleton;
typedef struct _WpaInterfaceP2PDeviceSkeletonClass WpaInterfaceP2PDeviceSkeletonClass;
typedef struct _WpaInterfaceP2PDeviceSkeletonPrivate WpaInterfaceP2PDeviceSkeletonPrivate;

struct _WpaInterfaceP2PDeviceSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaInterfaceP2PDeviceSkeletonPrivate *priv;
};

struct _WpaInterfaceP2PDeviceSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_interface_p2_pdevice_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaInterfaceP2PDeviceSkeleton, g_object_unref)
#endif

WpaInterfaceP2PDevice *
wpa_interface_p2_pdevice_skeleton_new(void);

G_END_DECLS

#endif /* __WPA_INTERFACE_H__ */
