/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __WPA_H__
#define __WPA_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (wpa_org_freedesktop_dbus_introspectable_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, wpaOrgFreedesktopDBusIntrospectable))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, wpaOrgFreedesktopDBusIntrospectableIface))

struct _wpaOrgFreedesktopDBusIntrospectable;
typedef struct _wpaOrgFreedesktopDBusIntrospectable wpaOrgFreedesktopDBusIntrospectable;
typedef struct _wpaOrgFreedesktopDBusIntrospectableIface wpaOrgFreedesktopDBusIntrospectableIface;

struct _wpaOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    wpaOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType wpa_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_org_freedesktop_dbus_introspectable_interface_info (void);
guint wpa_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_org_freedesktop_dbus_introspectable_complete_introspect (
    wpaOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);



/* D-Bus method calls: */
void wpa_org_freedesktop_dbus_introspectable_call_introspect (
    wpaOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_org_freedesktop_dbus_introspectable_call_introspect_finish (
    wpaOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean wpa_org_freedesktop_dbus_introspectable_call_introspect_sync (
    wpaOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (wpa_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpaOrgFreedesktopDBusIntrospectableProxy))
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpaOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, wpaOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _wpaOrgFreedesktopDBusIntrospectableProxy wpaOrgFreedesktopDBusIntrospectableProxy;
typedef struct _wpaOrgFreedesktopDBusIntrospectableProxyClass wpaOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _wpaOrgFreedesktopDBusIntrospectableProxyPrivate wpaOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _wpaOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpaOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _wpaOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void wpa_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaOrgFreedesktopDBusIntrospectable *wpa_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpaOrgFreedesktopDBusIntrospectable *wpa_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaOrgFreedesktopDBusIntrospectable *wpa_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpaOrgFreedesktopDBusIntrospectable *wpa_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (wpa_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpaOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpaOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, wpaOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _wpaOrgFreedesktopDBusIntrospectableSkeleton wpaOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _wpaOrgFreedesktopDBusIntrospectableSkeletonClass wpaOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _wpaOrgFreedesktopDBusIntrospectableSkeletonPrivate wpaOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _wpaOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpaOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _wpaOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

wpaOrgFreedesktopDBusIntrospectable *wpa_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (wpa_org_freedesktop_dbus_properties_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, wpaOrgFreedesktopDBusProperties))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, wpaOrgFreedesktopDBusPropertiesIface))

struct _wpaOrgFreedesktopDBusProperties;
typedef struct _wpaOrgFreedesktopDBusProperties wpaOrgFreedesktopDBusProperties;
typedef struct _wpaOrgFreedesktopDBusPropertiesIface wpaOrgFreedesktopDBusPropertiesIface;

struct _wpaOrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_propname);

  gboolean (*handle_get_all) (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value);

};

GType wpa_org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_org_freedesktop_dbus_properties_interface_info (void);
guint wpa_org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_org_freedesktop_dbus_properties_complete_get (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void wpa_org_freedesktop_dbus_properties_complete_get_all (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *props);

void wpa_org_freedesktop_dbus_properties_complete_set (
    wpaOrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void wpa_org_freedesktop_dbus_properties_call_get (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_org_freedesktop_dbus_properties_call_get_finish (
    wpaOrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean wpa_org_freedesktop_dbus_properties_call_get_sync (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void wpa_org_freedesktop_dbus_properties_call_get_all (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_org_freedesktop_dbus_properties_call_get_all_finish (
    wpaOrgFreedesktopDBusProperties *proxy,
    GVariant **out_props,
    GAsyncResult *res,
    GError **error);

gboolean wpa_org_freedesktop_dbus_properties_call_get_all_sync (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_props,
    GCancellable *cancellable,
    GError **error);

void wpa_org_freedesktop_dbus_properties_call_set (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_org_freedesktop_dbus_properties_call_set_finish (
    wpaOrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_org_freedesktop_dbus_properties_call_set_sync (
    wpaOrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_propname,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (wpa_org_freedesktop_dbus_properties_proxy_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpaOrgFreedesktopDBusPropertiesProxy))
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpaOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, wpaOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _wpaOrgFreedesktopDBusPropertiesProxy wpaOrgFreedesktopDBusPropertiesProxy;
typedef struct _wpaOrgFreedesktopDBusPropertiesProxyClass wpaOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _wpaOrgFreedesktopDBusPropertiesProxyPrivate wpaOrgFreedesktopDBusPropertiesProxyPrivate;

struct _wpaOrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpaOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _wpaOrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void wpa_org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaOrgFreedesktopDBusProperties *wpa_org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpaOrgFreedesktopDBusProperties *wpa_org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaOrgFreedesktopDBusProperties *wpa_org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpaOrgFreedesktopDBusProperties *wpa_org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (wpa_org_freedesktop_dbus_properties_skeleton_get_type ())
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpaOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpaOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, wpaOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _wpaOrgFreedesktopDBusPropertiesSkeleton wpaOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _wpaOrgFreedesktopDBusPropertiesSkeletonClass wpaOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _wpaOrgFreedesktopDBusPropertiesSkeletonPrivate wpaOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _wpaOrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpaOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _wpaOrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

wpaOrgFreedesktopDBusProperties *wpa_org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1 */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1 (wpa_fi_w1_wpa_supplicant1_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1, wpaFiW1Wpa_supplicant1))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1))
#define WPA_FI_W1_WPA_SUPPLICANT1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1, wpaFiW1Wpa_supplicant1Iface))

struct _wpaFiW1Wpa_supplicant1;
typedef struct _wpaFiW1Wpa_supplicant1 wpaFiW1Wpa_supplicant1;
typedef struct _wpaFiW1Wpa_supplicant1Iface wpaFiW1Wpa_supplicant1Iface;

struct _wpaFiW1Wpa_supplicant1Iface
{
  GTypeInterface parent_iface;



  gboolean (*handle_create_interface) (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_args);

  gboolean (*handle_expect_disconnect) (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_interface) (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ifname);

  gboolean (*handle_remove_interface) (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_path);

  const gchar *const * (*get_capabilities) (wpaFiW1Wpa_supplicant1 *object);

  const gchar * (*get_debug_level) (wpaFiW1Wpa_supplicant1 *object);

  gboolean  (*get_debug_show_keys) (wpaFiW1Wpa_supplicant1 *object);

  gboolean  (*get_debug_timestamp) (wpaFiW1Wpa_supplicant1 *object);

  const gchar *const * (*get_eap_methods) (wpaFiW1Wpa_supplicant1 *object);

  const gchar *const * (*get_interfaces) (wpaFiW1Wpa_supplicant1 *object);

  GVariant * (*get_wfdies) (wpaFiW1Wpa_supplicant1 *object);

  void (*interface_added) (
    wpaFiW1Wpa_supplicant1 *object,
    const gchar *arg_path,
    GVariant *arg_properties);

  void (*interface_removed) (
    wpaFiW1Wpa_supplicant1 *object,
    const gchar *arg_path);

  void (*properties_changed) (
    wpaFiW1Wpa_supplicant1 *object,
    GVariant *arg_properties);

};

GType wpa_fi_w1_wpa_supplicant1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *wpa_fi_w1_wpa_supplicant1_interface_info (void);
guint wpa_fi_w1_wpa_supplicant1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void wpa_fi_w1_wpa_supplicant1_complete_create_interface (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpa_fi_w1_wpa_supplicant1_complete_remove_interface (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation);

void wpa_fi_w1_wpa_supplicant1_complete_get_interface (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void wpa_fi_w1_wpa_supplicant1_complete_expect_disconnect (
    wpaFiW1Wpa_supplicant1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void wpa_fi_w1_wpa_supplicant1_emit_interface_added (
    wpaFiW1Wpa_supplicant1 *object,
    const gchar *arg_path,
    GVariant *arg_properties);

void wpa_fi_w1_wpa_supplicant1_emit_interface_removed (
    wpaFiW1Wpa_supplicant1 *object,
    const gchar *arg_path);

void wpa_fi_w1_wpa_supplicant1_emit_properties_changed (
    wpaFiW1Wpa_supplicant1 *object,
    GVariant *arg_properties);



/* D-Bus method calls: */
void wpa_fi_w1_wpa_supplicant1_call_create_interface (
    wpaFiW1Wpa_supplicant1 *proxy,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_create_interface_finish (
    wpaFiW1Wpa_supplicant1 *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpa_fi_w1_wpa_supplicant1_call_create_interface_sync (
    wpaFiW1Wpa_supplicant1 *proxy,
    GVariant *arg_args,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpa_fi_w1_wpa_supplicant1_call_remove_interface (
    wpaFiW1Wpa_supplicant1 *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_remove_interface_finish (
    wpaFiW1Wpa_supplicant1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_fi_w1_wpa_supplicant1_call_remove_interface_sync (
    wpaFiW1Wpa_supplicant1 *proxy,
    const gchar *arg_path,
    GCancellable *cancellable,
    GError **error);

void wpa_fi_w1_wpa_supplicant1_call_get_interface (
    wpaFiW1Wpa_supplicant1 *proxy,
    const gchar *arg_ifname,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_get_interface_finish (
    wpaFiW1Wpa_supplicant1 *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean wpa_fi_w1_wpa_supplicant1_call_get_interface_sync (
    wpaFiW1Wpa_supplicant1 *proxy,
    const gchar *arg_ifname,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void wpa_fi_w1_wpa_supplicant1_call_expect_disconnect (
    wpaFiW1Wpa_supplicant1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean wpa_fi_w1_wpa_supplicant1_call_expect_disconnect_finish (
    wpaFiW1Wpa_supplicant1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean wpa_fi_w1_wpa_supplicant1_call_expect_disconnect_sync (
    wpaFiW1Wpa_supplicant1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *wpa_fi_w1_wpa_supplicant1_get_debug_level (wpaFiW1Wpa_supplicant1 *object);
gchar *wpa_fi_w1_wpa_supplicant1_dup_debug_level (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_debug_level (wpaFiW1Wpa_supplicant1 *object, const gchar *value);

gboolean wpa_fi_w1_wpa_supplicant1_get_debug_timestamp (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_debug_timestamp (wpaFiW1Wpa_supplicant1 *object, gboolean value);

gboolean wpa_fi_w1_wpa_supplicant1_get_debug_show_keys (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_debug_show_keys (wpaFiW1Wpa_supplicant1 *object, gboolean value);

const gchar *const *wpa_fi_w1_wpa_supplicant1_get_interfaces (wpaFiW1Wpa_supplicant1 *object);
gchar **wpa_fi_w1_wpa_supplicant1_dup_interfaces (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_interfaces (wpaFiW1Wpa_supplicant1 *object, const gchar *const *value);

const gchar *const *wpa_fi_w1_wpa_supplicant1_get_eap_methods (wpaFiW1Wpa_supplicant1 *object);
gchar **wpa_fi_w1_wpa_supplicant1_dup_eap_methods (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_eap_methods (wpaFiW1Wpa_supplicant1 *object, const gchar *const *value);

const gchar *const *wpa_fi_w1_wpa_supplicant1_get_capabilities (wpaFiW1Wpa_supplicant1 *object);
gchar **wpa_fi_w1_wpa_supplicant1_dup_capabilities (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_capabilities (wpaFiW1Wpa_supplicant1 *object, const gchar *const *value);

GVariant *wpa_fi_w1_wpa_supplicant1_get_wfdies (wpaFiW1Wpa_supplicant1 *object);
GVariant *wpa_fi_w1_wpa_supplicant1_dup_wfdies (wpaFiW1Wpa_supplicant1 *object);
void wpa_fi_w1_wpa_supplicant1_set_wfdies (wpaFiW1Wpa_supplicant1 *object, GVariant *value);


/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY (wpa_fi_w1_wpa_supplicant1_proxy_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, wpaFiW1Wpa_supplicant1Proxy))
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, wpaFiW1Wpa_supplicant1ProxyClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY, wpaFiW1Wpa_supplicant1ProxyClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_PROXY))

typedef struct _wpaFiW1Wpa_supplicant1Proxy wpaFiW1Wpa_supplicant1Proxy;
typedef struct _wpaFiW1Wpa_supplicant1ProxyClass wpaFiW1Wpa_supplicant1ProxyClass;
typedef struct _wpaFiW1Wpa_supplicant1ProxyPrivate wpaFiW1Wpa_supplicant1ProxyPrivate;

struct _wpaFiW1Wpa_supplicant1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  wpaFiW1Wpa_supplicant1ProxyPrivate *priv;
};

struct _wpaFiW1Wpa_supplicant1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaFiW1Wpa_supplicant1Proxy, g_object_unref)
#endif

void wpa_fi_w1_wpa_supplicant1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaFiW1Wpa_supplicant1 *wpa_fi_w1_wpa_supplicant1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
wpaFiW1Wpa_supplicant1 *wpa_fi_w1_wpa_supplicant1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
wpaFiW1Wpa_supplicant1 *wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
wpaFiW1Wpa_supplicant1 *wpa_fi_w1_wpa_supplicant1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON (wpa_fi_w1_wpa_supplicant1_skeleton_get_type ())
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, wpaFiW1Wpa_supplicant1Skeleton))
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, wpaFiW1Wpa_supplicant1SkeletonClass))
#define WPA_FI_W1_WPA_SUPPLICANT1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON, wpaFiW1Wpa_supplicant1SkeletonClass))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON))
#define WPA_IS_FI_W1_WPA_SUPPLICANT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), WPA_TYPE_FI_W1_WPA_SUPPLICANT1_SKELETON))

typedef struct _wpaFiW1Wpa_supplicant1Skeleton wpaFiW1Wpa_supplicant1Skeleton;
typedef struct _wpaFiW1Wpa_supplicant1SkeletonClass wpaFiW1Wpa_supplicant1SkeletonClass;
typedef struct _wpaFiW1Wpa_supplicant1SkeletonPrivate wpaFiW1Wpa_supplicant1SkeletonPrivate;

struct _wpaFiW1Wpa_supplicant1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  wpaFiW1Wpa_supplicant1SkeletonPrivate *priv;
};

struct _wpaFiW1Wpa_supplicant1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType wpa_fi_w1_wpa_supplicant1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (wpaFiW1Wpa_supplicant1Skeleton, g_object_unref)
#endif

wpaFiW1Wpa_supplicant1 *wpa_fi_w1_wpa_supplicant1_skeleton_new (void);


G_END_DECLS

#endif /* __WPA_H__ */
