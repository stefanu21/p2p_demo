/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __WPA_H__
#define __WPA_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE                                    \
  (wpa_supplicant_org_freedesktop_dbus_introspectable_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,        \
                              WpaSupplicantOrgFreedesktopDBusIntrospectable))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o)                            \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,     \
                                 WpaSupplicantOrgFreedesktopDBusIntrospectableIface))

struct _WpaSupplicantOrgFreedesktopDBusIntrospectable;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectable
  WpaSupplicantOrgFreedesktopDBusIntrospectable;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableIface
  WpaSupplicantOrgFreedesktopDBusIntrospectableIface;

struct _WpaSupplicantOrgFreedesktopDBusIntrospectableIface {
  GTypeInterface parent_iface;

  gboolean (*handle_introspect)(WpaSupplicantOrgFreedesktopDBusIntrospectable *object,
                                GDBusMethodInvocation *invocation);
};

GType
wpa_supplicant_org_freedesktop_dbus_introspectable_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_supplicant_org_freedesktop_dbus_introspectable_interface_info(void);
guint
wpa_supplicant_org_freedesktop_dbus_introspectable_override_properties(GObjectClass *klass,
                                                                       guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_supplicant_org_freedesktop_dbus_introspectable_complete_introspect(
  WpaSupplicantOrgFreedesktopDBusIntrospectable *object, GDBusMethodInvocation *invocation,
  const gchar *data);

/* D-Bus method calls: */
void
wpa_supplicant_org_freedesktop_dbus_introspectable_call_introspect(
  WpaSupplicantOrgFreedesktopDBusIntrospectable *proxy, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_supplicant_org_freedesktop_dbus_introspectable_call_introspect_finish(
  WpaSupplicantOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GAsyncResult *res,
  GError **error);

gboolean
wpa_supplicant_org_freedesktop_dbus_introspectable_call_introspect_sync(
  WpaSupplicantOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GCancellable *cancellable,
  GError **error);

/* ---- */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY                              \
  (wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,  \
                              WpaSupplicantOrgFreedesktopDBusIntrospectableProxy))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                          \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,     \
                           WpaSupplicantOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o)                      \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,   \
                             WpaSupplicantOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                             \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                       \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableProxy
  WpaSupplicantOrgFreedesktopDBusIntrospectableProxy;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableProxyClass
  WpaSupplicantOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableProxyPrivate
  WpaSupplicantOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _WpaSupplicantOrgFreedesktopDBusIntrospectableProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaSupplicantOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _WpaSupplicantOrgFreedesktopDBusIntrospectableProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicantOrgFreedesktopDBusIntrospectable *
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new_finish(GAsyncResult *res,
                                                                    GError **error);
WpaSupplicantOrgFreedesktopDBusIntrospectable *
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicantOrgFreedesktopDBusIntrospectable *
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                            GError **error);
WpaSupplicantOrgFreedesktopDBusIntrospectable *
wpa_supplicant_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON                           \
  (wpa_supplicant_org_freedesktop_dbus_introspectable_skeleton_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                             \
  (G_TYPE_CHECK_INSTANCE_CAST((o),                                                                 \
                              WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,    \
                              WpaSupplicantOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                       \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,  \
                           WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o)                   \
  (G_TYPE_INSTANCE_GET_CLASS((o),                                                                  \
                             WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,     \
                             WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                          \
  (G_TYPE_CHECK_INSTANCE_TYPE((o),                                                                 \
                              WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                    \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableSkeleton
  WpaSupplicantOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonClass
  WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonPrivate
  WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _WpaSupplicantOrgFreedesktopDBusIntrospectableSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _WpaSupplicantOrgFreedesktopDBusIntrospectableSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_supplicant_org_freedesktop_dbus_introspectable_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

WpaSupplicantOrgFreedesktopDBusIntrospectable *
wpa_supplicant_org_freedesktop_dbus_introspectable_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES                                        \
  (wpa_supplicant_org_freedesktop_dbus_properties_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                          \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,            \
                              WpaSupplicantOrgFreedesktopDBusProperties))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                       \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o)                                \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,         \
                                 WpaSupplicantOrgFreedesktopDBusPropertiesIface))

struct _WpaSupplicantOrgFreedesktopDBusProperties;
typedef struct _WpaSupplicantOrgFreedesktopDBusProperties WpaSupplicantOrgFreedesktopDBusProperties;
typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesIface
  WpaSupplicantOrgFreedesktopDBusPropertiesIface;

struct _WpaSupplicantOrgFreedesktopDBusPropertiesIface {
  GTypeInterface parent_iface;

  gboolean (*handle_get)(WpaSupplicantOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname);

  gboolean (*handle_get_all)(WpaSupplicantOrgFreedesktopDBusProperties *object,
                             GDBusMethodInvocation *invocation, const gchar *arg_interface);

  gboolean (*handle_set)(WpaSupplicantOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname, GVariant *arg_value);
};

GType
wpa_supplicant_org_freedesktop_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_supplicant_org_freedesktop_dbus_properties_interface_info(void);
guint
wpa_supplicant_org_freedesktop_dbus_properties_override_properties(GObjectClass *klass,
                                                                   guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_supplicant_org_freedesktop_dbus_properties_complete_get(
  WpaSupplicantOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation,
  GVariant *value);

void
wpa_supplicant_org_freedesktop_dbus_properties_complete_get_all(
  WpaSupplicantOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation,
  GVariant *props);

void
wpa_supplicant_org_freedesktop_dbus_properties_complete_set(
  WpaSupplicantOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation);

/* D-Bus method calls: */
void
wpa_supplicant_org_freedesktop_dbus_properties_call_get(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GCancellable *cancellable, GAsyncReadyCallback callback,
  gpointer user_data);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_get_finish(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, GVariant **out_value, GAsyncResult *res,
  GError **error);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_get_sync(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant **out_value, GCancellable *cancellable, GError **error);

void
wpa_supplicant_org_freedesktop_dbus_properties_call_get_all(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_get_all_finish(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, GVariant **out_props, GAsyncResult *res,
  GError **error);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_get_all_sync(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  GVariant **out_props, GCancellable *cancellable, GError **error);

void
wpa_supplicant_org_freedesktop_dbus_properties_call_set(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant *arg_value, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_set_finish(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, GAsyncResult *res, GError **error);

gboolean
wpa_supplicant_org_freedesktop_dbus_properties_call_set_sync(
  WpaSupplicantOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface,
  const gchar *arg_propname, GVariant *arg_value, GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY                                  \
  (wpa_supplicant_org_freedesktop_dbus_properties_proxy_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                    \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,      \
                              WpaSupplicantOrgFreedesktopDBusPropertiesProxy))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                              \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,         \
                           WpaSupplicantOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                          \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,       \
                             WpaSupplicantOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                 \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                           \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesProxy
  WpaSupplicantOrgFreedesktopDBusPropertiesProxy;
typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesProxyClass
  WpaSupplicantOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesProxyPrivate
  WpaSupplicantOrgFreedesktopDBusPropertiesProxyPrivate;

struct _WpaSupplicantOrgFreedesktopDBusPropertiesProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaSupplicantOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _WpaSupplicantOrgFreedesktopDBusPropertiesProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_supplicant_org_freedesktop_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicantOrgFreedesktopDBusProperties *
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new_finish(GAsyncResult *res, GError **error);
WpaSupplicantOrgFreedesktopDBusProperties *
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicantOrgFreedesktopDBusProperties *
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                        GError **error);
WpaSupplicantOrgFreedesktopDBusProperties *
wpa_supplicant_org_freedesktop_dbus_properties_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON                               \
  (wpa_supplicant_org_freedesktop_dbus_properties_skeleton_get_type())
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                 \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,   \
                              WpaSupplicantOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                           \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,      \
                           WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_SUPPLICANT_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                       \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,    \
                             WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                              \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_SUPPLICANT_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                        \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesSkeleton
  WpaSupplicantOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonClass
  WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonPrivate
  WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _WpaSupplicantOrgFreedesktopDBusPropertiesSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _WpaSupplicantOrgFreedesktopDBusPropertiesSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_supplicant_org_freedesktop_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

WpaSupplicantOrgFreedesktopDBusProperties *
wpa_supplicant_org_freedesktop_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1 */

#define WPA_SUPPLICANT_TYPE_  (wpa_supplicant__get_type())
#define WPA_SUPPLICANT_(o)    (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE_, WpaSupplicant))
#define WPA_SUPPLICANT_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE_))
#define WPA_SUPPLICANT__GET_IFACE(o)                                                               \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_SUPPLICANT_TYPE_, WpaSupplicantIface))

struct _WpaSupplicant;
typedef struct _WpaSupplicant WpaSupplicant;
typedef struct _WpaSupplicantIface WpaSupplicantIface;

struct _WpaSupplicantIface {
  GTypeInterface parent_iface;

  gboolean (*handle_create_interface)(WpaSupplicant *object, GDBusMethodInvocation *invocation,
                                      GVariant *arg_args);

  gboolean (*handle_expect_disconnect)(WpaSupplicant *object, GDBusMethodInvocation *invocation);

  gboolean (*handle_get_interface)(WpaSupplicant *object, GDBusMethodInvocation *invocation,
                                   const gchar *arg_ifname);

  gboolean (*handle_remove_interface)(WpaSupplicant *object, GDBusMethodInvocation *invocation,
                                      const gchar *arg_path);

  const gchar *const *(*get_capabilities)(WpaSupplicant *object);

  const gchar *(*get_debug_level)(WpaSupplicant *object);

  gboolean (*get_debug_show_keys)(WpaSupplicant *object);

  gboolean (*get_debug_timestamp)(WpaSupplicant *object);

  const gchar *const *(*get_eap_methods)(WpaSupplicant *object);

  const gchar *const *(*get_interfaces)(WpaSupplicant *object);

  GVariant *(*get_wfdies)(WpaSupplicant *object);

  void (*interface_added)(WpaSupplicant *object, const gchar *arg_path, GVariant *arg_properties);

  void (*interface_removed)(WpaSupplicant *object, const gchar *arg_path);

  void (*properties_changed)(WpaSupplicant *object, GVariant *arg_properties);
};

GType
wpa_supplicant__get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_supplicant__interface_info(void);
guint
wpa_supplicant__override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_supplicant__complete_create_interface(WpaSupplicant *object, GDBusMethodInvocation *invocation,
                                          const gchar *path);

void
wpa_supplicant__complete_remove_interface(WpaSupplicant *object, GDBusMethodInvocation *invocation);

void
wpa_supplicant__complete_get_interface(WpaSupplicant *object, GDBusMethodInvocation *invocation,
                                       const gchar *path);

void
wpa_supplicant__complete_expect_disconnect(WpaSupplicant *object,
                                           GDBusMethodInvocation *invocation);

/* D-Bus signal emissions functions: */
void
wpa_supplicant__emit_interface_added(WpaSupplicant *object, const gchar *arg_path,
                                     GVariant *arg_properties);

void
wpa_supplicant__emit_interface_removed(WpaSupplicant *object, const gchar *arg_path);

void
wpa_supplicant__emit_properties_changed(WpaSupplicant *object, GVariant *arg_properties);

/* D-Bus method calls: */
void
wpa_supplicant__call_create_interface(WpaSupplicant *proxy, GVariant *arg_args,
                                      GCancellable *cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);

gboolean
wpa_supplicant__call_create_interface_finish(WpaSupplicant *proxy, gchar **out_path,
                                             GAsyncResult *res, GError **error);

gboolean
wpa_supplicant__call_create_interface_sync(WpaSupplicant *proxy, GVariant *arg_args,
                                           gchar **out_path, GCancellable *cancellable,
                                           GError **error);

void
wpa_supplicant__call_remove_interface(WpaSupplicant *proxy, const gchar *arg_path,
                                      GCancellable *cancellable, GAsyncReadyCallback callback,
                                      gpointer user_data);

gboolean
wpa_supplicant__call_remove_interface_finish(WpaSupplicant *proxy, GAsyncResult *res,
                                             GError **error);

gboolean
wpa_supplicant__call_remove_interface_sync(WpaSupplicant *proxy, const gchar *arg_path,
                                           GCancellable *cancellable, GError **error);

void
wpa_supplicant__call_get_interface(WpaSupplicant *proxy, const gchar *arg_ifname,
                                   GCancellable *cancellable, GAsyncReadyCallback callback,
                                   gpointer user_data);

gboolean
wpa_supplicant__call_get_interface_finish(WpaSupplicant *proxy, gchar **out_path, GAsyncResult *res,
                                          GError **error);

gboolean
wpa_supplicant__call_get_interface_sync(WpaSupplicant *proxy, const gchar *arg_ifname,
                                        gchar **out_path, GCancellable *cancellable,
                                        GError **error);

void
wpa_supplicant__call_expect_disconnect(WpaSupplicant *proxy, GCancellable *cancellable,
                                       GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_supplicant__call_expect_disconnect_finish(WpaSupplicant *proxy, GAsyncResult *res,
                                              GError **error);

gboolean
wpa_supplicant__call_expect_disconnect_sync(WpaSupplicant *proxy, GCancellable *cancellable,
                                            GError **error);

/* D-Bus property accessors: */
const gchar *
wpa_supplicant__get_debug_level(WpaSupplicant *object);
gchar *
wpa_supplicant__dup_debug_level(WpaSupplicant *object);
void
wpa_supplicant__set_debug_level(WpaSupplicant *object, const gchar *value);

gboolean
wpa_supplicant__get_debug_timestamp(WpaSupplicant *object);
void
wpa_supplicant__set_debug_timestamp(WpaSupplicant *object, gboolean value);

gboolean
wpa_supplicant__get_debug_show_keys(WpaSupplicant *object);
void
wpa_supplicant__set_debug_show_keys(WpaSupplicant *object, gboolean value);

const gchar *const *
wpa_supplicant__get_interfaces(WpaSupplicant *object);
gchar **
wpa_supplicant__dup_interfaces(WpaSupplicant *object);
void
wpa_supplicant__set_interfaces(WpaSupplicant *object, const gchar *const *value);

const gchar *const *
wpa_supplicant__get_eap_methods(WpaSupplicant *object);
gchar **
wpa_supplicant__dup_eap_methods(WpaSupplicant *object);
void
wpa_supplicant__set_eap_methods(WpaSupplicant *object, const gchar *const *value);

const gchar *const *
wpa_supplicant__get_capabilities(WpaSupplicant *object);
gchar **
wpa_supplicant__dup_capabilities(WpaSupplicant *object);
void
wpa_supplicant__set_capabilities(WpaSupplicant *object, const gchar *const *value);

GVariant *
wpa_supplicant__get_wfdies(WpaSupplicant *object);
GVariant *
wpa_supplicant__dup_wfdies(WpaSupplicant *object);
void
wpa_supplicant__set_wfdies(WpaSupplicant *object, GVariant *value);

/* ---- */

#define WPA_SUPPLICANT_TYPE__PROXY (wpa_supplicant__proxy_get_type())
#define WPA_SUPPLICANT__PROXY(o)                                                                   \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE__PROXY, WpaSupplicantProxy))
#define WPA_SUPPLICANT__PROXY_CLASS(k)                                                             \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE__PROXY, WpaSupplicantProxyClass))
#define WPA_SUPPLICANT__PROXY_GET_CLASS(o)                                                         \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_SUPPLICANT_TYPE__PROXY, WpaSupplicantProxyClass))
#define WPA_SUPPLICANT_IS__PROXY(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE__PROXY))
#define WPA_SUPPLICANT_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE__PROXY))

typedef struct _WpaSupplicantProxy WpaSupplicantProxy;
typedef struct _WpaSupplicantProxyClass WpaSupplicantProxyClass;
typedef struct _WpaSupplicantProxyPrivate WpaSupplicantProxyPrivate;

struct _WpaSupplicantProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaSupplicantProxyPrivate *priv;
};

struct _WpaSupplicantProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_supplicant__proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantProxy, g_object_unref)
#endif

void
wpa_supplicant__proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                          const gchar *object_path, GCancellable *cancellable,
                          GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicant *
wpa_supplicant__proxy_new_finish(GAsyncResult *res, GError **error);
WpaSupplicant *
wpa_supplicant__proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags,
                               const gchar *name, const gchar *object_path,
                               GCancellable *cancellable, GError **error);

void
wpa_supplicant__proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                  const gchar *object_path, GCancellable *cancellable,
                                  GAsyncReadyCallback callback, gpointer user_data);
WpaSupplicant *
wpa_supplicant__proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaSupplicant *
wpa_supplicant__proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                       const gchar *object_path, GCancellable *cancellable,
                                       GError **error);

/* ---- */

#define WPA_SUPPLICANT_TYPE__SKELETON (wpa_supplicant__skeleton_get_type())
#define WPA_SUPPLICANT__SKELETON(o)                                                                \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_SUPPLICANT_TYPE__SKELETON, WpaSupplicantSkeleton))
#define WPA_SUPPLICANT__SKELETON_CLASS(k)                                                          \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_SUPPLICANT_TYPE__SKELETON, WpaSupplicantSkeletonClass))
#define WPA_SUPPLICANT__SKELETON_GET_CLASS(o)                                                      \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_SUPPLICANT_TYPE__SKELETON, WpaSupplicantSkeletonClass))
#define WPA_SUPPLICANT_IS__SKELETON(o)                                                             \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_SUPPLICANT_TYPE__SKELETON))
#define WPA_SUPPLICANT_IS__SKELETON_CLASS(k)                                                       \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_SUPPLICANT_TYPE__SKELETON))

typedef struct _WpaSupplicantSkeleton WpaSupplicantSkeleton;
typedef struct _WpaSupplicantSkeletonClass WpaSupplicantSkeletonClass;
typedef struct _WpaSupplicantSkeletonPrivate WpaSupplicantSkeletonPrivate;

struct _WpaSupplicantSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaSupplicantSkeletonPrivate *priv;
};

struct _WpaSupplicantSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_supplicant__skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaSupplicantSkeleton, g_object_unref)
#endif

WpaSupplicant *
wpa_supplicant__skeleton_new(void);

G_END_DECLS

#endif /* __WPA_H__ */
