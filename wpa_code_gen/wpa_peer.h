/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __WPA_PEER_H__
#define __WPA_PEER_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE                                          \
  (wpa_peer_org_freedesktop_dbus_introspectable_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                            \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,              \
                              WpaPeerOrgFreedesktopDBusIntrospectable))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o)                                         \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o)                                  \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE,           \
                                 WpaPeerOrgFreedesktopDBusIntrospectableIface))

struct _WpaPeerOrgFreedesktopDBusIntrospectable;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectable WpaPeerOrgFreedesktopDBusIntrospectable;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableIface
  WpaPeerOrgFreedesktopDBusIntrospectableIface;

struct _WpaPeerOrgFreedesktopDBusIntrospectableIface {
  GTypeInterface parent_iface;

  gboolean (*handle_introspect)(WpaPeerOrgFreedesktopDBusIntrospectable *object,
                                GDBusMethodInvocation *invocation);
};

GType
wpa_peer_org_freedesktop_dbus_introspectable_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_peer_org_freedesktop_dbus_introspectable_interface_info(void);
guint
wpa_peer_org_freedesktop_dbus_introspectable_override_properties(GObjectClass *klass,
                                                                 guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_peer_org_freedesktop_dbus_introspectable_complete_introspect(
  WpaPeerOrgFreedesktopDBusIntrospectable *object, GDBusMethodInvocation *invocation,
  const gchar *data);

/* D-Bus method calls: */
void
wpa_peer_org_freedesktop_dbus_introspectable_call_introspect(
  WpaPeerOrgFreedesktopDBusIntrospectable *proxy, GCancellable *cancellable,
  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_peer_org_freedesktop_dbus_introspectable_call_introspect_finish(
  WpaPeerOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GAsyncResult *res,
  GError **error);

gboolean
wpa_peer_org_freedesktop_dbus_introspectable_call_introspect_sync(
  WpaPeerOrgFreedesktopDBusIntrospectable *proxy, gchar **out_data, GCancellable *cancellable,
  GError **error);

/* ---- */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY                                    \
  (wpa_peer_org_freedesktop_dbus_introspectable_proxy_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,        \
                              WpaPeerOrgFreedesktopDBusIntrospectableProxy))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                                \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,           \
                           WpaPeerOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o)                            \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY,         \
                             WpaPeerOrgFreedesktopDBusIntrospectableProxyClass))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o)                                   \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                             \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableProxy
  WpaPeerOrgFreedesktopDBusIntrospectableProxy;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableProxyClass
  WpaPeerOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableProxyPrivate
  WpaPeerOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _WpaPeerOrgFreedesktopDBusIntrospectableProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaPeerOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _WpaPeerOrgFreedesktopDBusIntrospectableProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_peer_org_freedesktop_dbus_introspectable_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerOrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaPeerOrgFreedesktopDBusIntrospectable *
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new_finish(GAsyncResult *res, GError **error);
WpaPeerOrgFreedesktopDBusIntrospectable *
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new_sync(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

void
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaPeerOrgFreedesktopDBusIntrospectable *
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                      GError **error);
WpaPeerOrgFreedesktopDBusIntrospectable *
wpa_peer_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON                                 \
  (wpa_peer_org_freedesktop_dbus_introspectable_skeleton_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                                   \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,     \
                              WpaPeerOrgFreedesktopDBusIntrospectableSkeleton))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                             \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,        \
                           WpaPeerOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o)                         \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON,      \
                             WpaPeerOrgFreedesktopDBusIntrospectableSkeletonClass))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o)                                \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                          \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableSkeleton
  WpaPeerOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableSkeletonClass
  WpaPeerOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _WpaPeerOrgFreedesktopDBusIntrospectableSkeletonPrivate
  WpaPeerOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _WpaPeerOrgFreedesktopDBusIntrospectableSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaPeerOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _WpaPeerOrgFreedesktopDBusIntrospectableSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_peer_org_freedesktop_dbus_introspectable_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerOrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

WpaPeerOrgFreedesktopDBusIntrospectable *
wpa_peer_org_freedesktop_dbus_introspectable_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES                                              \
  (wpa_peer_org_freedesktop_dbus_properties_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                                \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,                  \
                              WpaPeerOrgFreedesktopDBusProperties))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o)                                             \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o)                                      \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES,               \
                                 WpaPeerOrgFreedesktopDBusPropertiesIface))

struct _WpaPeerOrgFreedesktopDBusProperties;
typedef struct _WpaPeerOrgFreedesktopDBusProperties WpaPeerOrgFreedesktopDBusProperties;
typedef struct _WpaPeerOrgFreedesktopDBusPropertiesIface WpaPeerOrgFreedesktopDBusPropertiesIface;

struct _WpaPeerOrgFreedesktopDBusPropertiesIface {
  GTypeInterface parent_iface;

  gboolean (*handle_get)(WpaPeerOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname);

  gboolean (*handle_get_all)(WpaPeerOrgFreedesktopDBusProperties *object,
                             GDBusMethodInvocation *invocation, const gchar *arg_interface);

  gboolean (*handle_set)(WpaPeerOrgFreedesktopDBusProperties *object,
                         GDBusMethodInvocation *invocation, const gchar *arg_interface,
                         const gchar *arg_propname, GVariant *arg_value);
};

GType
wpa_peer_org_freedesktop_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_peer_org_freedesktop_dbus_properties_interface_info(void);
guint
wpa_peer_org_freedesktop_dbus_properties_override_properties(GObjectClass *klass,
                                                             guint property_id_begin);

/* D-Bus method call completion functions: */
void
wpa_peer_org_freedesktop_dbus_properties_complete_get(WpaPeerOrgFreedesktopDBusProperties *object,
                                                      GDBusMethodInvocation *invocation,
                                                      GVariant *value);

void
wpa_peer_org_freedesktop_dbus_properties_complete_get_all(
  WpaPeerOrgFreedesktopDBusProperties *object, GDBusMethodInvocation *invocation, GVariant *props);

void
wpa_peer_org_freedesktop_dbus_properties_complete_set(WpaPeerOrgFreedesktopDBusProperties *object,
                                                      GDBusMethodInvocation *invocation);

/* D-Bus method calls: */
void
wpa_peer_org_freedesktop_dbus_properties_call_get(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                  const gchar *arg_interface,
                                                  const gchar *arg_propname,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_get_finish(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                         GVariant **out_value, GAsyncResult *res,
                                                         GError **error);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_get_sync(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                       const gchar *arg_interface,
                                                       const gchar *arg_propname,
                                                       GVariant **out_value,
                                                       GCancellable *cancellable, GError **error);

void
wpa_peer_org_freedesktop_dbus_properties_call_get_all(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                      const gchar *arg_interface,
                                                      GCancellable *cancellable,
                                                      GAsyncReadyCallback callback,
                                                      gpointer user_data);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_get_all_finish(
  WpaPeerOrgFreedesktopDBusProperties *proxy, GVariant **out_props, GAsyncResult *res,
  GError **error);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_get_all_sync(
  WpaPeerOrgFreedesktopDBusProperties *proxy, const gchar *arg_interface, GVariant **out_props,
  GCancellable *cancellable, GError **error);

void
wpa_peer_org_freedesktop_dbus_properties_call_set(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                  const gchar *arg_interface,
                                                  const gchar *arg_propname, GVariant *arg_value,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback, gpointer user_data);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_set_finish(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                         GAsyncResult *res, GError **error);

gboolean
wpa_peer_org_freedesktop_dbus_properties_call_set_sync(WpaPeerOrgFreedesktopDBusProperties *proxy,
                                                       const gchar *arg_interface,
                                                       const gchar *arg_propname,
                                                       GVariant *arg_value,
                                                       GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY                                        \
  (wpa_peer_org_freedesktop_dbus_properties_proxy_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                          \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,            \
                              WpaPeerOrgFreedesktopDBusPropertiesProxy))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                    \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,               \
                           WpaPeerOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                                \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY,             \
                             WpaPeerOrgFreedesktopDBusPropertiesProxyClass))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o)                                       \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k)                                 \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _WpaPeerOrgFreedesktopDBusPropertiesProxy WpaPeerOrgFreedesktopDBusPropertiesProxy;
typedef struct _WpaPeerOrgFreedesktopDBusPropertiesProxyClass
  WpaPeerOrgFreedesktopDBusPropertiesProxyClass;
typedef struct _WpaPeerOrgFreedesktopDBusPropertiesProxyPrivate
  WpaPeerOrgFreedesktopDBusPropertiesProxyPrivate;

struct _WpaPeerOrgFreedesktopDBusPropertiesProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaPeerOrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _WpaPeerOrgFreedesktopDBusPropertiesProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_peer_org_freedesktop_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerOrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void
wpa_peer_org_freedesktop_dbus_properties_proxy_new(
  GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaPeerOrgFreedesktopDBusProperties *
wpa_peer_org_freedesktop_dbus_properties_proxy_new_finish(GAsyncResult *res, GError **error);
WpaPeerOrgFreedesktopDBusProperties *
wpa_peer_org_freedesktop_dbus_properties_proxy_new_sync(GDBusConnection *connection,
                                                        GDBusProxyFlags flags, const gchar *name,
                                                        const gchar *object_path,
                                                        GCancellable *cancellable, GError **error);

void
wpa_peer_org_freedesktop_dbus_properties_proxy_new_for_bus(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
WpaPeerOrgFreedesktopDBusProperties *
wpa_peer_org_freedesktop_dbus_properties_proxy_new_for_bus_finish(GAsyncResult *res,
                                                                  GError **error);
WpaPeerOrgFreedesktopDBusProperties *
wpa_peer_org_freedesktop_dbus_properties_proxy_new_for_bus_sync(
  GBusType bus_type, GDBusProxyFlags flags, const gchar *name, const gchar *object_path,
  GCancellable *cancellable, GError **error);

/* ---- */

#define WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON                                     \
  (wpa_peer_org_freedesktop_dbus_properties_skeleton_get_type())
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                       \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,         \
                              WpaPeerOrgFreedesktopDBusPropertiesSkeleton))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                                 \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,            \
                           WpaPeerOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_PEER_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                             \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON,          \
                             WpaPeerOrgFreedesktopDBusPropertiesSkeletonClass))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o)                                    \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define WPA_PEER_IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k)                              \
  (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _WpaPeerOrgFreedesktopDBusPropertiesSkeleton
  WpaPeerOrgFreedesktopDBusPropertiesSkeleton;
typedef struct _WpaPeerOrgFreedesktopDBusPropertiesSkeletonClass
  WpaPeerOrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _WpaPeerOrgFreedesktopDBusPropertiesSkeletonPrivate
  WpaPeerOrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _WpaPeerOrgFreedesktopDBusPropertiesSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaPeerOrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _WpaPeerOrgFreedesktopDBusPropertiesSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_peer_org_freedesktop_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerOrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

WpaPeerOrgFreedesktopDBusProperties *
wpa_peer_org_freedesktop_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for fi.w1.wpa_supplicant1.Peer */

#define WPA_PEER_TYPE_         (wpa_peer__get_type())
#define WPA_PEER_(o)           (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE_, WpaPeer))
#define WPA_PEER_IS_(o)        (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE_))
#define WPA_PEER__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), WPA_PEER_TYPE_, WpaPeerIface))

struct _WpaPeer;
typedef struct _WpaPeer WpaPeer;
typedef struct _WpaPeerIface WpaPeerIface;

struct _WpaPeerIface {
  GTypeInterface parent_iface;

  guint16 (*get_config_method)(WpaPeer *object);

  GVariant *(*get_device_address)(WpaPeer *object);

  const gchar *(*get_device_name)(WpaPeer *object);

  guchar (*get_devicecapability)(WpaPeer *object);

  guchar (*get_groupcapability)(WpaPeer *object);

  const gchar *const *(*get_groups)(WpaPeer *object);

  const gchar *(*get_ies)(WpaPeer *object);

  gint (*get_level)(WpaPeer *object);

  const gchar *(*get_manufacturer)(WpaPeer *object);

  const gchar *(*get_model_name)(WpaPeer *object);

  const gchar *(*get_model_number)(WpaPeer *object);

  const gchar *(*get_primary_device_type)(WpaPeer *object);

  const gchar *const *(*get_secondary_device_types)(WpaPeer *object);

  const gchar *(*get_serial_number)(WpaPeer *object);

  const gchar *const *(*get_vendor_extension)(WpaPeer *object);

  void (*properties_changed)(WpaPeer *object, GVariant *arg_properties);
};

GType
wpa_peer__get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo *
wpa_peer__interface_info(void);
guint
wpa_peer__override_properties(GObjectClass *klass, guint property_id_begin);

/* D-Bus signal emissions functions: */
void
wpa_peer__emit_properties_changed(WpaPeer *object, GVariant *arg_properties);

/* D-Bus property accessors: */
const gchar *
wpa_peer__get_device_name(WpaPeer *object);
gchar *
wpa_peer__dup_device_name(WpaPeer *object);
void
wpa_peer__set_device_name(WpaPeer *object, const gchar *value);

const gchar *
wpa_peer__get_manufacturer(WpaPeer *object);
gchar *
wpa_peer__dup_manufacturer(WpaPeer *object);
void
wpa_peer__set_manufacturer(WpaPeer *object, const gchar *value);

const gchar *
wpa_peer__get_model_name(WpaPeer *object);
gchar *
wpa_peer__dup_model_name(WpaPeer *object);
void
wpa_peer__set_model_name(WpaPeer *object, const gchar *value);

const gchar *
wpa_peer__get_model_number(WpaPeer *object);
gchar *
wpa_peer__dup_model_number(WpaPeer *object);
void
wpa_peer__set_model_number(WpaPeer *object, const gchar *value);

const gchar *
wpa_peer__get_serial_number(WpaPeer *object);
gchar *
wpa_peer__dup_serial_number(WpaPeer *object);
void
wpa_peer__set_serial_number(WpaPeer *object, const gchar *value);

const gchar *
wpa_peer__get_primary_device_type(WpaPeer *object);
gchar *
wpa_peer__dup_primary_device_type(WpaPeer *object);
void
wpa_peer__set_primary_device_type(WpaPeer *object, const gchar *value);

guint16
wpa_peer__get_config_method(WpaPeer *object);
void
wpa_peer__set_config_method(WpaPeer *object, guint16 value);

gint
wpa_peer__get_level(WpaPeer *object);
void
wpa_peer__set_level(WpaPeer *object, gint value);

guchar
wpa_peer__get_devicecapability(WpaPeer *object);
void
wpa_peer__set_devicecapability(WpaPeer *object, guchar value);

guchar
wpa_peer__get_groupcapability(WpaPeer *object);
void
wpa_peer__set_groupcapability(WpaPeer *object, guchar value);

const gchar *const *
wpa_peer__get_secondary_device_types(WpaPeer *object);
gchar **
wpa_peer__dup_secondary_device_types(WpaPeer *object);
void
wpa_peer__set_secondary_device_types(WpaPeer *object, const gchar *const *value);

const gchar *const *
wpa_peer__get_vendor_extension(WpaPeer *object);
gchar **
wpa_peer__dup_vendor_extension(WpaPeer *object);
void
wpa_peer__set_vendor_extension(WpaPeer *object, const gchar *const *value);

const gchar *
wpa_peer__get_ies(WpaPeer *object);
gchar *
wpa_peer__dup_ies(WpaPeer *object);
void
wpa_peer__set_ies(WpaPeer *object, const gchar *value);

GVariant *
wpa_peer__get_device_address(WpaPeer *object);
GVariant *
wpa_peer__dup_device_address(WpaPeer *object);
void
wpa_peer__set_device_address(WpaPeer *object, GVariant *value);

const gchar *const *
wpa_peer__get_groups(WpaPeer *object);
gchar **
wpa_peer__dup_groups(WpaPeer *object);
void
wpa_peer__set_groups(WpaPeer *object, const gchar *const *value);

/* ---- */

#define WPA_PEER_TYPE__PROXY (wpa_peer__proxy_get_type())
#define WPA_PEER__PROXY(o)   (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE__PROXY, WpaPeerProxy))
#define WPA_PEER__PROXY_CLASS(k)                                                                   \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE__PROXY, WpaPeerProxyClass))
#define WPA_PEER__PROXY_GET_CLASS(o)                                                               \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE__PROXY, WpaPeerProxyClass))
#define WPA_PEER_IS__PROXY(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE__PROXY))
#define WPA_PEER_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE__PROXY))

typedef struct _WpaPeerProxy WpaPeerProxy;
typedef struct _WpaPeerProxyClass WpaPeerProxyClass;
typedef struct _WpaPeerProxyPrivate WpaPeerProxyPrivate;

struct _WpaPeerProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  WpaPeerProxyPrivate *priv;
};

struct _WpaPeerProxyClass {
  GDBusProxyClass parent_class;
};

GType
wpa_peer__proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerProxy, g_object_unref)
#endif

void
wpa_peer__proxy_new(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                    const gchar *object_path, GCancellable *cancellable,
                    GAsyncReadyCallback callback, gpointer user_data);
WpaPeer *
wpa_peer__proxy_new_finish(GAsyncResult *res, GError **error);
WpaPeer *
wpa_peer__proxy_new_sync(GDBusConnection *connection, GDBusProxyFlags flags, const gchar *name,
                         const gchar *object_path, GCancellable *cancellable, GError **error);

void
wpa_peer__proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                            const gchar *object_path, GCancellable *cancellable,
                            GAsyncReadyCallback callback, gpointer user_data);
WpaPeer *
wpa_peer__proxy_new_for_bus_finish(GAsyncResult *res, GError **error);
WpaPeer *
wpa_peer__proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, const gchar *name,
                                 const gchar *object_path, GCancellable *cancellable,
                                 GError **error);

/* ---- */

#define WPA_PEER_TYPE__SKELETON (wpa_peer__skeleton_get_type())
#define WPA_PEER__SKELETON(o)                                                                      \
  (G_TYPE_CHECK_INSTANCE_CAST((o), WPA_PEER_TYPE__SKELETON, WpaPeerSkeleton))
#define WPA_PEER__SKELETON_CLASS(k)                                                                \
  (G_TYPE_CHECK_CLASS_CAST((k), WPA_PEER_TYPE__SKELETON, WpaPeerSkeletonClass))
#define WPA_PEER__SKELETON_GET_CLASS(o)                                                            \
  (G_TYPE_INSTANCE_GET_CLASS((o), WPA_PEER_TYPE__SKELETON, WpaPeerSkeletonClass))
#define WPA_PEER_IS__SKELETON(o)       (G_TYPE_CHECK_INSTANCE_TYPE((o), WPA_PEER_TYPE__SKELETON))
#define WPA_PEER_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE((k), WPA_PEER_TYPE__SKELETON))

typedef struct _WpaPeerSkeleton WpaPeerSkeleton;
typedef struct _WpaPeerSkeletonClass WpaPeerSkeletonClass;
typedef struct _WpaPeerSkeletonPrivate WpaPeerSkeletonPrivate;

struct _WpaPeerSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  WpaPeerSkeletonPrivate *priv;
};

struct _WpaPeerSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType
wpa_peer__skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(WpaPeerSkeleton, g_object_unref)
#endif

WpaPeer *
wpa_peer__skeleton_new(void);

G_END_DECLS

#endif /* __WPA_PEER_H__ */
